
printf_swd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fa8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08002064  08002064  00012064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002140  08002140  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002140  08002140  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002140  08002140  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002140  08002140  00012140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002144  08002144  00012144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002148  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000078  080021c0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  080021c0  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000044aa  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001025  00000000  00000000  0002454a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000460  00000000  00000000  00025570  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003c8  00000000  00000000  000259d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016674  00000000  00000000  00025d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000045e6  00000000  00000000  0003c40c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008af23  00000000  00000000  000409f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cb915  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016e4  00000000  00000000  000cb990  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000078 	.word	0x20000078
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800204c 	.word	0x0800204c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000007c 	.word	0x2000007c
 8000100:	0800204c 	.word	0x0800204c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f806 	bl	8000228 <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	46c0      	nop			; (mov r8, r8)

0800022c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000230:	f001 f9ba 	bl	80015a8 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000234:	f000 f94a 	bl	80004cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000238:	f000 f80e 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023c:	f000 f86a 	bl	8000314 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  puts("Hello from NR.electronics!");
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <main+0x28>)
 8000242:	0018      	movs	r0, r3
 8000244:	f001 fbee 	bl	8001a24 <puts>
	  HAL_Delay(1000);
 8000248:	23fa      	movs	r3, #250	; 0xfa
 800024a:	009b      	lsls	r3, r3, #2
 800024c:	0018      	movs	r0, r3
 800024e:	f000 f9c1 	bl	80005d4 <HAL_Delay>
	  puts("Hello from NR.electronics!");
 8000252:	e7f5      	b.n	8000240 <main+0x14>
 8000254:	08002064 	.word	0x08002064

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b590      	push	{r4, r7, lr}
 800025a:	b093      	sub	sp, #76	; 0x4c
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	2410      	movs	r4, #16
 8000260:	193b      	adds	r3, r7, r4
 8000262:	0018      	movs	r0, r3
 8000264:	2338      	movs	r3, #56	; 0x38
 8000266:	001a      	movs	r2, r3
 8000268:	2100      	movs	r1, #0
 800026a:	f001 fb15 	bl	8001898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026e:	003b      	movs	r3, r7
 8000270:	0018      	movs	r0, r3
 8000272:	2310      	movs	r3, #16
 8000274:	001a      	movs	r2, r3
 8000276:	2100      	movs	r1, #0
 8000278:	f001 fb0e 	bl	8001898 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800027c:	2380      	movs	r3, #128	; 0x80
 800027e:	009b      	lsls	r3, r3, #2
 8000280:	0018      	movs	r0, r3
 8000282:	f000 fa7d 	bl	8000780 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000286:	193b      	adds	r3, r7, r4
 8000288:	2202      	movs	r2, #2
 800028a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028c:	193b      	adds	r3, r7, r4
 800028e:	2280      	movs	r2, #128	; 0x80
 8000290:	0052      	lsls	r2, r2, #1
 8000292:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000294:	0021      	movs	r1, r4
 8000296:	187b      	adds	r3, r7, r1
 8000298:	2200      	movs	r2, #0
 800029a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2240      	movs	r2, #64	; 0x40
 80002a0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	2202      	movs	r2, #2
 80002a6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	2202      	movs	r2, #2
 80002ac:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	2200      	movs	r2, #0
 80002b2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80002b4:	187b      	adds	r3, r7, r1
 80002b6:	2208      	movs	r2, #8
 80002b8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2280      	movs	r2, #128	; 0x80
 80002be:	0292      	lsls	r2, r2, #10
 80002c0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2280      	movs	r2, #128	; 0x80
 80002c6:	0492      	lsls	r2, r2, #18
 80002c8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2280      	movs	r2, #128	; 0x80
 80002ce:	0592      	lsls	r2, r2, #22
 80002d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	0018      	movs	r0, r3
 80002d6:	f000 fa93 	bl	8000800 <HAL_RCC_OscConfig>
 80002da:	1e03      	subs	r3, r0, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002de:	f000 f83b 	bl	8000358 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e2:	003b      	movs	r3, r7
 80002e4:	2207      	movs	r2, #7
 80002e6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e8:	003b      	movs	r3, r7
 80002ea:	2202      	movs	r2, #2
 80002ec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ee:	003b      	movs	r3, r7
 80002f0:	2200      	movs	r2, #0
 80002f2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f4:	003b      	movs	r3, r7
 80002f6:	2200      	movs	r2, #0
 80002f8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002fa:	003b      	movs	r3, r7
 80002fc:	2102      	movs	r1, #2
 80002fe:	0018      	movs	r0, r3
 8000300:	f000 fd9e 	bl	8000e40 <HAL_RCC_ClockConfig>
 8000304:	1e03      	subs	r3, r0, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000308:	f000 f826 	bl	8000358 <Error_Handler>
  }
}
 800030c:	46c0      	nop			; (mov r8, r8)
 800030e:	46bd      	mov	sp, r7
 8000310:	b013      	add	sp, #76	; 0x4c
 8000312:	bd90      	pop	{r4, r7, pc}

08000314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800031a:	4b0e      	ldr	r3, [pc, #56]	; (8000354 <MX_GPIO_Init+0x40>)
 800031c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800031e:	4b0d      	ldr	r3, [pc, #52]	; (8000354 <MX_GPIO_Init+0x40>)
 8000320:	2120      	movs	r1, #32
 8000322:	430a      	orrs	r2, r1
 8000324:	635a      	str	r2, [r3, #52]	; 0x34
 8000326:	4b0b      	ldr	r3, [pc, #44]	; (8000354 <MX_GPIO_Init+0x40>)
 8000328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800032a:	2220      	movs	r2, #32
 800032c:	4013      	ands	r3, r2
 800032e:	607b      	str	r3, [r7, #4]
 8000330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000332:	4b08      	ldr	r3, [pc, #32]	; (8000354 <MX_GPIO_Init+0x40>)
 8000334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000336:	4b07      	ldr	r3, [pc, #28]	; (8000354 <MX_GPIO_Init+0x40>)
 8000338:	2101      	movs	r1, #1
 800033a:	430a      	orrs	r2, r1
 800033c:	635a      	str	r2, [r3, #52]	; 0x34
 800033e:	4b05      	ldr	r3, [pc, #20]	; (8000354 <MX_GPIO_Init+0x40>)
 8000340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000342:	2201      	movs	r2, #1
 8000344:	4013      	ands	r3, r2
 8000346:	603b      	str	r3, [r7, #0]
 8000348:	683b      	ldr	r3, [r7, #0]

}
 800034a:	46c0      	nop			; (mov r8, r8)
 800034c:	46bd      	mov	sp, r7
 800034e:	b002      	add	sp, #8
 8000350:	bd80      	pop	{r7, pc}
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	40021000 	.word	0x40021000

08000358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
	...

08000364 <LL_SYSCFG_DisableDBATT>:
  *         @arg @ref LL_SYSCFG_UCPD2_STROBE
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 800036c:	4b04      	ldr	r3, [pc, #16]	; (8000380 <LL_SYSCFG_DisableDBATT+0x1c>)
 800036e:	6819      	ldr	r1, [r3, #0]
 8000370:	4b03      	ldr	r3, [pc, #12]	; (8000380 <LL_SYSCFG_DisableDBATT+0x1c>)
 8000372:	687a      	ldr	r2, [r7, #4]
 8000374:	430a      	orrs	r2, r1
 8000376:	601a      	str	r2, [r3, #0]
}
 8000378:	46c0      	nop			; (mov r8, r8)
 800037a:	46bd      	mov	sp, r7
 800037c:	b002      	add	sp, #8
 800037e:	bd80      	pop	{r7, pc}
 8000380:	40010000 	.word	0x40010000

08000384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800038a:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <HAL_MspInit+0x4c>)
 800038c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800038e:	4b10      	ldr	r3, [pc, #64]	; (80003d0 <HAL_MspInit+0x4c>)
 8000390:	2101      	movs	r1, #1
 8000392:	430a      	orrs	r2, r1
 8000394:	641a      	str	r2, [r3, #64]	; 0x40
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <HAL_MspInit+0x4c>)
 8000398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800039a:	2201      	movs	r2, #1
 800039c:	4013      	ands	r3, r2
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003a2:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <HAL_MspInit+0x4c>)
 80003a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80003a6:	4b0a      	ldr	r3, [pc, #40]	; (80003d0 <HAL_MspInit+0x4c>)
 80003a8:	2180      	movs	r1, #128	; 0x80
 80003aa:	0549      	lsls	r1, r1, #21
 80003ac:	430a      	orrs	r2, r1
 80003ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80003b0:	4b07      	ldr	r3, [pc, #28]	; (80003d0 <HAL_MspInit+0x4c>)
 80003b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80003b4:	2380      	movs	r3, #128	; 0x80
 80003b6:	055b      	lsls	r3, r3, #21
 80003b8:	4013      	ands	r3, r2
 80003ba:	603b      	str	r3, [r7, #0]
 80003bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_SYSCFG_DisableDBATT(LL_SYSCFG_UCPD1_STROBE | LL_SYSCFG_UCPD2_STROBE);
 80003be:	23c0      	movs	r3, #192	; 0xc0
 80003c0:	00db      	lsls	r3, r3, #3
 80003c2:	0018      	movs	r0, r3
 80003c4:	f7ff ffce 	bl	8000364 <LL_SYSCFG_DisableDBATT>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003c8:	46c0      	nop			; (mov r8, r8)
 80003ca:	46bd      	mov	sp, r7
 80003cc:	b002      	add	sp, #8
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	40021000 	.word	0x40021000

080003d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80003d8:	46c0      	nop			; (mov r8, r8)
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}

080003de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003de:	b580      	push	{r7, lr}
 80003e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003e2:	e7fe      	b.n	80003e2 <HardFault_Handler+0x4>

080003e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80003e8:	46c0      	nop			; (mov r8, r8)
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}

080003ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003fc:	f000 f8d0 	bl	80005a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000400:	46c0      	nop			; (mov r8, r8)
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
	...

08000408 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000410:	4b11      	ldr	r3, [pc, #68]	; (8000458 <_sbrk+0x50>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d102      	bne.n	800041e <_sbrk+0x16>
		heap_end = &end;
 8000418:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <_sbrk+0x50>)
 800041a:	4a10      	ldr	r2, [pc, #64]	; (800045c <_sbrk+0x54>)
 800041c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800041e:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <_sbrk+0x50>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000424:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <_sbrk+0x50>)
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	18d3      	adds	r3, r2, r3
 800042c:	466a      	mov	r2, sp
 800042e:	4293      	cmp	r3, r2
 8000430:	d907      	bls.n	8000442 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000432:	f001 f931 	bl	8001698 <__errno>
 8000436:	0003      	movs	r3, r0
 8000438:	220c      	movs	r2, #12
 800043a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800043c:	2301      	movs	r3, #1
 800043e:	425b      	negs	r3, r3
 8000440:	e006      	b.n	8000450 <_sbrk+0x48>
	}

	heap_end += incr;
 8000442:	4b05      	ldr	r3, [pc, #20]	; (8000458 <_sbrk+0x50>)
 8000444:	681a      	ldr	r2, [r3, #0]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	18d2      	adds	r2, r2, r3
 800044a:	4b03      	ldr	r3, [pc, #12]	; (8000458 <_sbrk+0x50>)
 800044c:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800044e:	68fb      	ldr	r3, [r7, #12]
}
 8000450:	0018      	movs	r0, r3
 8000452:	46bd      	mov	sp, r7
 8000454:	b004      	add	sp, #16
 8000456:	bd80      	pop	{r7, pc}
 8000458:	20000094 	.word	0x20000094
 800045c:	20000158 	.word	0x20000158

08000460 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000464:	4b03      	ldr	r3, [pc, #12]	; (8000474 <SystemInit+0x14>)
 8000466:	2280      	movs	r2, #128	; 0x80
 8000468:	0512      	lsls	r2, r2, #20
 800046a:	609a      	str	r2, [r3, #8]
#endif
}
 800046c:	46c0      	nop			; (mov r8, r8)
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	e000ed00 	.word	0xe000ed00

08000478 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000478:	480d      	ldr	r0, [pc, #52]	; (80004b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800047a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800047c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800047e:	e003      	b.n	8000488 <LoopCopyDataInit>

08000480 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000480:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000482:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000484:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000486:	3104      	adds	r1, #4

08000488 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000488:	480b      	ldr	r0, [pc, #44]	; (80004b8 <LoopForever+0xa>)
  ldr r3, =_edata
 800048a:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <LoopForever+0xe>)
  adds r2, r0, r1
 800048c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800048e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000490:	d3f6      	bcc.n	8000480 <CopyDataInit>
  ldr r2, =_sbss
 8000492:	4a0b      	ldr	r2, [pc, #44]	; (80004c0 <LoopForever+0x12>)
  b LoopFillZerobss
 8000494:	e002      	b.n	800049c <LoopFillZerobss>

08000496 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000496:	2300      	movs	r3, #0
  str  r3, [r2]
 8000498:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800049a:	3204      	adds	r2, #4

0800049c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800049c:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <LoopForever+0x16>)
  cmp r2, r3
 800049e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80004a0:	d3f9      	bcc.n	8000496 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004a2:	f7ff ffdd 	bl	8000460 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80004a6:	f001 f9d3 	bl	8001850 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004aa:	f7ff febf 	bl	800022c <main>

080004ae <LoopForever>:

LoopForever:
    b LoopForever
 80004ae:	e7fe      	b.n	80004ae <LoopForever>
  ldr   r0, =_estack
 80004b0:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 80004b4:	08002148 	.word	0x08002148
  ldr r0, =_sdata
 80004b8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80004bc:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 80004c0:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 80004c4:	20000154 	.word	0x20000154

080004c8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004c8:	e7fe      	b.n	80004c8 <ADC1_COMP_IRQHandler>
	...

080004cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004d2:	1dfb      	adds	r3, r7, #7
 80004d4:	2200      	movs	r2, #0
 80004d6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x3c>)
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <HAL_Init+0x3c>)
 80004de:	2180      	movs	r1, #128	; 0x80
 80004e0:	0049      	lsls	r1, r1, #1
 80004e2:	430a      	orrs	r2, r1
 80004e4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004e6:	2000      	movs	r0, #0
 80004e8:	f000 f810 	bl	800050c <HAL_InitTick>
 80004ec:	1e03      	subs	r3, r0, #0
 80004ee:	d003      	beq.n	80004f8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80004f0:	1dfb      	adds	r3, r7, #7
 80004f2:	2201      	movs	r2, #1
 80004f4:	701a      	strb	r2, [r3, #0]
 80004f6:	e001      	b.n	80004fc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80004f8:	f7ff ff44 	bl	8000384 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004fc:	1dfb      	adds	r3, r7, #7
 80004fe:	781b      	ldrb	r3, [r3, #0]
}
 8000500:	0018      	movs	r0, r3
 8000502:	46bd      	mov	sp, r7
 8000504:	b002      	add	sp, #8
 8000506:	bd80      	pop	{r7, pc}
 8000508:	40022000 	.word	0x40022000

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000514:	230f      	movs	r3, #15
 8000516:	18fb      	adds	r3, r7, r3
 8000518:	2200      	movs	r2, #0
 800051a:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 800051c:	4b1d      	ldr	r3, [pc, #116]	; (8000594 <HAL_InitTick+0x88>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d02b      	beq.n	800057c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8000524:	4b1c      	ldr	r3, [pc, #112]	; (8000598 <HAL_InitTick+0x8c>)
 8000526:	681c      	ldr	r4, [r3, #0]
 8000528:	4b1a      	ldr	r3, [pc, #104]	; (8000594 <HAL_InitTick+0x88>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	0019      	movs	r1, r3
 800052e:	23fa      	movs	r3, #250	; 0xfa
 8000530:	0098      	lsls	r0, r3, #2
 8000532:	f7ff fdef 	bl	8000114 <__udivsi3>
 8000536:	0003      	movs	r3, r0
 8000538:	0019      	movs	r1, r3
 800053a:	0020      	movs	r0, r4
 800053c:	f7ff fdea 	bl	8000114 <__udivsi3>
 8000540:	0003      	movs	r3, r0
 8000542:	0018      	movs	r0, r3
 8000544:	f000 f90f 	bl	8000766 <HAL_SYSTICK_Config>
 8000548:	1e03      	subs	r3, r0, #0
 800054a:	d112      	bne.n	8000572 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2b03      	cmp	r3, #3
 8000550:	d80a      	bhi.n	8000568 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	2301      	movs	r3, #1
 8000556:	425b      	negs	r3, r3
 8000558:	2200      	movs	r2, #0
 800055a:	0018      	movs	r0, r3
 800055c:	f000 f8ee 	bl	800073c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000560:	4b0e      	ldr	r3, [pc, #56]	; (800059c <HAL_InitTick+0x90>)
 8000562:	687a      	ldr	r2, [r7, #4]
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	e00d      	b.n	8000584 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000568:	230f      	movs	r3, #15
 800056a:	18fb      	adds	r3, r7, r3
 800056c:	2201      	movs	r2, #1
 800056e:	701a      	strb	r2, [r3, #0]
 8000570:	e008      	b.n	8000584 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000572:	230f      	movs	r3, #15
 8000574:	18fb      	adds	r3, r7, r3
 8000576:	2201      	movs	r2, #1
 8000578:	701a      	strb	r2, [r3, #0]
 800057a:	e003      	b.n	8000584 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800057c:	230f      	movs	r3, #15
 800057e:	18fb      	adds	r3, r7, r3
 8000580:	2201      	movs	r2, #1
 8000582:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000584:	230f      	movs	r3, #15
 8000586:	18fb      	adds	r3, r7, r3
 8000588:	781b      	ldrb	r3, [r3, #0]
}
 800058a:	0018      	movs	r0, r3
 800058c:	46bd      	mov	sp, r7
 800058e:	b005      	add	sp, #20
 8000590:	bd90      	pop	{r4, r7, pc}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	20000008 	.word	0x20000008
 8000598:	20000000 	.word	0x20000000
 800059c:	20000004 	.word	0x20000004

080005a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <HAL_IncTick+0x18>)
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	4b04      	ldr	r3, [pc, #16]	; (80005bc <HAL_IncTick+0x1c>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	18d2      	adds	r2, r2, r3
 80005ae:	4b02      	ldr	r3, [pc, #8]	; (80005b8 <HAL_IncTick+0x18>)
 80005b0:	601a      	str	r2, [r3, #0]
}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	2000014c 	.word	0x2000014c
 80005bc:	20000008 	.word	0x20000008

080005c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  return uwTick;
 80005c4:	4b02      	ldr	r3, [pc, #8]	; (80005d0 <HAL_GetTick+0x10>)
 80005c6:	681b      	ldr	r3, [r3, #0]
}
 80005c8:	0018      	movs	r0, r3
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	2000014c 	.word	0x2000014c

080005d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005dc:	f7ff fff0 	bl	80005c0 <HAL_GetTick>
 80005e0:	0003      	movs	r3, r0
 80005e2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	3301      	adds	r3, #1
 80005ec:	d004      	beq.n	80005f8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <HAL_Delay+0x40>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	68fa      	ldr	r2, [r7, #12]
 80005f4:	18d3      	adds	r3, r2, r3
 80005f6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	f7ff ffe1 	bl	80005c0 <HAL_GetTick>
 80005fe:	0002      	movs	r2, r0
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	1ad3      	subs	r3, r2, r3
 8000604:	68fa      	ldr	r2, [r7, #12]
 8000606:	429a      	cmp	r2, r3
 8000608:	d8f7      	bhi.n	80005fa <HAL_Delay+0x26>
  {
  }
}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	b004      	add	sp, #16
 8000610:	bd80      	pop	{r7, pc}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	20000008 	.word	0x20000008

08000618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000618:	b590      	push	{r4, r7, lr}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	0002      	movs	r2, r0
 8000620:	6039      	str	r1, [r7, #0]
 8000622:	1dfb      	adds	r3, r7, #7
 8000624:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000626:	1dfb      	adds	r3, r7, #7
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b7f      	cmp	r3, #127	; 0x7f
 800062c:	d828      	bhi.n	8000680 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800062e:	4a2f      	ldr	r2, [pc, #188]	; (80006ec <__NVIC_SetPriority+0xd4>)
 8000630:	1dfb      	adds	r3, r7, #7
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	b25b      	sxtb	r3, r3
 8000636:	089b      	lsrs	r3, r3, #2
 8000638:	33c0      	adds	r3, #192	; 0xc0
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	589b      	ldr	r3, [r3, r2]
 800063e:	1dfa      	adds	r2, r7, #7
 8000640:	7812      	ldrb	r2, [r2, #0]
 8000642:	0011      	movs	r1, r2
 8000644:	2203      	movs	r2, #3
 8000646:	400a      	ands	r2, r1
 8000648:	00d2      	lsls	r2, r2, #3
 800064a:	21ff      	movs	r1, #255	; 0xff
 800064c:	4091      	lsls	r1, r2
 800064e:	000a      	movs	r2, r1
 8000650:	43d2      	mvns	r2, r2
 8000652:	401a      	ands	r2, r3
 8000654:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	019b      	lsls	r3, r3, #6
 800065a:	22ff      	movs	r2, #255	; 0xff
 800065c:	401a      	ands	r2, r3
 800065e:	1dfb      	adds	r3, r7, #7
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	0018      	movs	r0, r3
 8000664:	2303      	movs	r3, #3
 8000666:	4003      	ands	r3, r0
 8000668:	00db      	lsls	r3, r3, #3
 800066a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800066c:	481f      	ldr	r0, [pc, #124]	; (80006ec <__NVIC_SetPriority+0xd4>)
 800066e:	1dfb      	adds	r3, r7, #7
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	b25b      	sxtb	r3, r3
 8000674:	089b      	lsrs	r3, r3, #2
 8000676:	430a      	orrs	r2, r1
 8000678:	33c0      	adds	r3, #192	; 0xc0
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800067e:	e031      	b.n	80006e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000680:	4a1b      	ldr	r2, [pc, #108]	; (80006f0 <__NVIC_SetPriority+0xd8>)
 8000682:	1dfb      	adds	r3, r7, #7
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	0019      	movs	r1, r3
 8000688:	230f      	movs	r3, #15
 800068a:	400b      	ands	r3, r1
 800068c:	3b08      	subs	r3, #8
 800068e:	089b      	lsrs	r3, r3, #2
 8000690:	3306      	adds	r3, #6
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	18d3      	adds	r3, r2, r3
 8000696:	3304      	adds	r3, #4
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	1dfa      	adds	r2, r7, #7
 800069c:	7812      	ldrb	r2, [r2, #0]
 800069e:	0011      	movs	r1, r2
 80006a0:	2203      	movs	r2, #3
 80006a2:	400a      	ands	r2, r1
 80006a4:	00d2      	lsls	r2, r2, #3
 80006a6:	21ff      	movs	r1, #255	; 0xff
 80006a8:	4091      	lsls	r1, r2
 80006aa:	000a      	movs	r2, r1
 80006ac:	43d2      	mvns	r2, r2
 80006ae:	401a      	ands	r2, r3
 80006b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	019b      	lsls	r3, r3, #6
 80006b6:	22ff      	movs	r2, #255	; 0xff
 80006b8:	401a      	ands	r2, r3
 80006ba:	1dfb      	adds	r3, r7, #7
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	0018      	movs	r0, r3
 80006c0:	2303      	movs	r3, #3
 80006c2:	4003      	ands	r3, r0
 80006c4:	00db      	lsls	r3, r3, #3
 80006c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006c8:	4809      	ldr	r0, [pc, #36]	; (80006f0 <__NVIC_SetPriority+0xd8>)
 80006ca:	1dfb      	adds	r3, r7, #7
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	001c      	movs	r4, r3
 80006d0:	230f      	movs	r3, #15
 80006d2:	4023      	ands	r3, r4
 80006d4:	3b08      	subs	r3, #8
 80006d6:	089b      	lsrs	r3, r3, #2
 80006d8:	430a      	orrs	r2, r1
 80006da:	3306      	adds	r3, #6
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	18c3      	adds	r3, r0, r3
 80006e0:	3304      	adds	r3, #4
 80006e2:	601a      	str	r2, [r3, #0]
}
 80006e4:	46c0      	nop			; (mov r8, r8)
 80006e6:	46bd      	mov	sp, r7
 80006e8:	b003      	add	sp, #12
 80006ea:	bd90      	pop	{r4, r7, pc}
 80006ec:	e000e100 	.word	0xe000e100
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	3b01      	subs	r3, #1
 8000700:	4a0c      	ldr	r2, [pc, #48]	; (8000734 <SysTick_Config+0x40>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d901      	bls.n	800070a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000706:	2301      	movs	r3, #1
 8000708:	e010      	b.n	800072c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <SysTick_Config+0x44>)
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	3a01      	subs	r2, #1
 8000710:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000712:	2301      	movs	r3, #1
 8000714:	425b      	negs	r3, r3
 8000716:	2103      	movs	r1, #3
 8000718:	0018      	movs	r0, r3
 800071a:	f7ff ff7d 	bl	8000618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <SysTick_Config+0x44>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000724:	4b04      	ldr	r3, [pc, #16]	; (8000738 <SysTick_Config+0x44>)
 8000726:	2207      	movs	r2, #7
 8000728:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800072a:	2300      	movs	r3, #0
}
 800072c:	0018      	movs	r0, r3
 800072e:	46bd      	mov	sp, r7
 8000730:	b002      	add	sp, #8
 8000732:	bd80      	pop	{r7, pc}
 8000734:	00ffffff 	.word	0x00ffffff
 8000738:	e000e010 	.word	0xe000e010

0800073c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	60b9      	str	r1, [r7, #8]
 8000744:	607a      	str	r2, [r7, #4]
 8000746:	210f      	movs	r1, #15
 8000748:	187b      	adds	r3, r7, r1
 800074a:	1c02      	adds	r2, r0, #0
 800074c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800074e:	68ba      	ldr	r2, [r7, #8]
 8000750:	187b      	adds	r3, r7, r1
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	b25b      	sxtb	r3, r3
 8000756:	0011      	movs	r1, r2
 8000758:	0018      	movs	r0, r3
 800075a:	f7ff ff5d 	bl	8000618 <__NVIC_SetPriority>
}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	b004      	add	sp, #16
 8000764:	bd80      	pop	{r7, pc}

08000766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	0018      	movs	r0, r3
 8000772:	f7ff ffbf 	bl	80006f4 <SysTick_Config>
 8000776:	0003      	movs	r3, r0
}
 8000778:	0018      	movs	r0, r3
 800077a:	46bd      	mov	sp, r7
 800077c:	b002      	add	sp, #8
 800077e:	bd80      	pop	{r7, pc}

08000780 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000788:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a19      	ldr	r2, [pc, #100]	; (80007f4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800078e:	4013      	ands	r3, r2
 8000790:	0019      	movs	r1, r3
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	430a      	orrs	r2, r1
 8000798:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d11f      	bne.n	80007e4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	0013      	movs	r3, r2
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	189b      	adds	r3, r3, r2
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	4912      	ldr	r1, [pc, #72]	; (80007fc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80007b2:	0018      	movs	r0, r3
 80007b4:	f7ff fcae 	bl	8000114 <__udivsi3>
 80007b8:	0003      	movs	r3, r0
 80007ba:	3301      	adds	r3, #1
 80007bc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80007be:	e008      	b.n	80007d2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d003      	beq.n	80007ce <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	3b01      	subs	r3, #1
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	e001      	b.n	80007d2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80007ce:	2303      	movs	r3, #3
 80007d0:	e009      	b.n	80007e6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80007d2:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80007d4:	695a      	ldr	r2, [r3, #20]
 80007d6:	2380      	movs	r3, #128	; 0x80
 80007d8:	00db      	lsls	r3, r3, #3
 80007da:	401a      	ands	r2, r3
 80007dc:	2380      	movs	r3, #128	; 0x80
 80007de:	00db      	lsls	r3, r3, #3
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d0ed      	beq.n	80007c0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80007e4:	2300      	movs	r3, #0
}
 80007e6:	0018      	movs	r0, r3
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b004      	add	sp, #16
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	40007000 	.word	0x40007000
 80007f4:	fffff9ff 	.word	0xfffff9ff
 80007f8:	20000000 	.word	0x20000000
 80007fc:	000f4240 	.word	0x000f4240

08000800 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d101      	bne.n	8000812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800080e:	2301      	movs	r3, #1
 8000810:	e304      	b.n	8000e1c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2201      	movs	r2, #1
 8000818:	4013      	ands	r3, r2
 800081a:	d100      	bne.n	800081e <HAL_RCC_OscConfig+0x1e>
 800081c:	e07c      	b.n	8000918 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800081e:	4bc3      	ldr	r3, [pc, #780]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 8000820:	689b      	ldr	r3, [r3, #8]
 8000822:	2238      	movs	r2, #56	; 0x38
 8000824:	4013      	ands	r3, r2
 8000826:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000828:	4bc0      	ldr	r3, [pc, #768]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	2203      	movs	r2, #3
 800082e:	4013      	ands	r3, r2
 8000830:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000832:	69bb      	ldr	r3, [r7, #24]
 8000834:	2b10      	cmp	r3, #16
 8000836:	d102      	bne.n	800083e <HAL_RCC_OscConfig+0x3e>
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	2b03      	cmp	r3, #3
 800083c:	d002      	beq.n	8000844 <HAL_RCC_OscConfig+0x44>
 800083e:	69bb      	ldr	r3, [r7, #24]
 8000840:	2b08      	cmp	r3, #8
 8000842:	d10b      	bne.n	800085c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000844:	4bb9      	ldr	r3, [pc, #740]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	029b      	lsls	r3, r3, #10
 800084c:	4013      	ands	r3, r2
 800084e:	d062      	beq.n	8000916 <HAL_RCC_OscConfig+0x116>
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d15e      	bne.n	8000916 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000858:	2301      	movs	r3, #1
 800085a:	e2df      	b.n	8000e1c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	685a      	ldr	r2, [r3, #4]
 8000860:	2380      	movs	r3, #128	; 0x80
 8000862:	025b      	lsls	r3, r3, #9
 8000864:	429a      	cmp	r2, r3
 8000866:	d107      	bne.n	8000878 <HAL_RCC_OscConfig+0x78>
 8000868:	4bb0      	ldr	r3, [pc, #704]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	4baf      	ldr	r3, [pc, #700]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 800086e:	2180      	movs	r1, #128	; 0x80
 8000870:	0249      	lsls	r1, r1, #9
 8000872:	430a      	orrs	r2, r1
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	e020      	b.n	80008ba <HAL_RCC_OscConfig+0xba>
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	685a      	ldr	r2, [r3, #4]
 800087c:	23a0      	movs	r3, #160	; 0xa0
 800087e:	02db      	lsls	r3, r3, #11
 8000880:	429a      	cmp	r2, r3
 8000882:	d10e      	bne.n	80008a2 <HAL_RCC_OscConfig+0xa2>
 8000884:	4ba9      	ldr	r3, [pc, #676]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	4ba8      	ldr	r3, [pc, #672]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 800088a:	2180      	movs	r1, #128	; 0x80
 800088c:	02c9      	lsls	r1, r1, #11
 800088e:	430a      	orrs	r2, r1
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	4ba6      	ldr	r3, [pc, #664]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	4ba5      	ldr	r3, [pc, #660]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 8000898:	2180      	movs	r1, #128	; 0x80
 800089a:	0249      	lsls	r1, r1, #9
 800089c:	430a      	orrs	r2, r1
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	e00b      	b.n	80008ba <HAL_RCC_OscConfig+0xba>
 80008a2:	4ba2      	ldr	r3, [pc, #648]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	4ba1      	ldr	r3, [pc, #644]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 80008a8:	49a1      	ldr	r1, [pc, #644]	; (8000b30 <HAL_RCC_OscConfig+0x330>)
 80008aa:	400a      	ands	r2, r1
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	4b9f      	ldr	r3, [pc, #636]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	4b9e      	ldr	r3, [pc, #632]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 80008b4:	499f      	ldr	r1, [pc, #636]	; (8000b34 <HAL_RCC_OscConfig+0x334>)
 80008b6:	400a      	ands	r2, r1
 80008b8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d014      	beq.n	80008ec <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80008c2:	f7ff fe7d 	bl	80005c0 <HAL_GetTick>
 80008c6:	0003      	movs	r3, r0
 80008c8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80008ca:	e008      	b.n	80008de <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80008cc:	f7ff fe78 	bl	80005c0 <HAL_GetTick>
 80008d0:	0002      	movs	r2, r0
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	2b64      	cmp	r3, #100	; 0x64
 80008d8:	d901      	bls.n	80008de <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80008da:	2303      	movs	r3, #3
 80008dc:	e29e      	b.n	8000e1c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80008de:	4b93      	ldr	r3, [pc, #588]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	2380      	movs	r3, #128	; 0x80
 80008e4:	029b      	lsls	r3, r3, #10
 80008e6:	4013      	ands	r3, r2
 80008e8:	d0f0      	beq.n	80008cc <HAL_RCC_OscConfig+0xcc>
 80008ea:	e015      	b.n	8000918 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80008ec:	f7ff fe68 	bl	80005c0 <HAL_GetTick>
 80008f0:	0003      	movs	r3, r0
 80008f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80008f4:	e008      	b.n	8000908 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80008f6:	f7ff fe63 	bl	80005c0 <HAL_GetTick>
 80008fa:	0002      	movs	r2, r0
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	1ad3      	subs	r3, r2, r3
 8000900:	2b64      	cmp	r3, #100	; 0x64
 8000902:	d901      	bls.n	8000908 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000904:	2303      	movs	r3, #3
 8000906:	e289      	b.n	8000e1c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000908:	4b88      	ldr	r3, [pc, #544]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	2380      	movs	r3, #128	; 0x80
 800090e:	029b      	lsls	r3, r3, #10
 8000910:	4013      	ands	r3, r2
 8000912:	d1f0      	bne.n	80008f6 <HAL_RCC_OscConfig+0xf6>
 8000914:	e000      	b.n	8000918 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000916:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2202      	movs	r2, #2
 800091e:	4013      	ands	r3, r2
 8000920:	d100      	bne.n	8000924 <HAL_RCC_OscConfig+0x124>
 8000922:	e099      	b.n	8000a58 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000924:	4b81      	ldr	r3, [pc, #516]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	2238      	movs	r2, #56	; 0x38
 800092a:	4013      	ands	r3, r2
 800092c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800092e:	4b7f      	ldr	r3, [pc, #508]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 8000930:	68db      	ldr	r3, [r3, #12]
 8000932:	2203      	movs	r2, #3
 8000934:	4013      	ands	r3, r2
 8000936:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	2b10      	cmp	r3, #16
 800093c:	d102      	bne.n	8000944 <HAL_RCC_OscConfig+0x144>
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	2b02      	cmp	r3, #2
 8000942:	d002      	beq.n	800094a <HAL_RCC_OscConfig+0x14a>
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d135      	bne.n	80009b6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800094a:	4b78      	ldr	r3, [pc, #480]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	2380      	movs	r3, #128	; 0x80
 8000950:	00db      	lsls	r3, r3, #3
 8000952:	4013      	ands	r3, r2
 8000954:	d005      	beq.n	8000962 <HAL_RCC_OscConfig+0x162>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	68db      	ldr	r3, [r3, #12]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d101      	bne.n	8000962 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	e25c      	b.n	8000e1c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000962:	4b72      	ldr	r3, [pc, #456]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	4a74      	ldr	r2, [pc, #464]	; (8000b38 <HAL_RCC_OscConfig+0x338>)
 8000968:	4013      	ands	r3, r2
 800096a:	0019      	movs	r1, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	695b      	ldr	r3, [r3, #20]
 8000970:	021a      	lsls	r2, r3, #8
 8000972:	4b6e      	ldr	r3, [pc, #440]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 8000974:	430a      	orrs	r2, r1
 8000976:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d112      	bne.n	80009a4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800097e:	4b6b      	ldr	r3, [pc, #428]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a6e      	ldr	r2, [pc, #440]	; (8000b3c <HAL_RCC_OscConfig+0x33c>)
 8000984:	4013      	ands	r3, r2
 8000986:	0019      	movs	r1, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	691a      	ldr	r2, [r3, #16]
 800098c:	4b67      	ldr	r3, [pc, #412]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 800098e:	430a      	orrs	r2, r1
 8000990:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000992:	4b66      	ldr	r3, [pc, #408]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	0adb      	lsrs	r3, r3, #11
 8000998:	2207      	movs	r2, #7
 800099a:	4013      	ands	r3, r2
 800099c:	4a68      	ldr	r2, [pc, #416]	; (8000b40 <HAL_RCC_OscConfig+0x340>)
 800099e:	40da      	lsrs	r2, r3
 80009a0:	4b68      	ldr	r3, [pc, #416]	; (8000b44 <HAL_RCC_OscConfig+0x344>)
 80009a2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80009a4:	4b68      	ldr	r3, [pc, #416]	; (8000b48 <HAL_RCC_OscConfig+0x348>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	0018      	movs	r0, r3
 80009aa:	f7ff fdaf 	bl	800050c <HAL_InitTick>
 80009ae:	1e03      	subs	r3, r0, #0
 80009b0:	d051      	beq.n	8000a56 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	e232      	b.n	8000e1c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	68db      	ldr	r3, [r3, #12]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d030      	beq.n	8000a20 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80009be:	4b5b      	ldr	r3, [pc, #364]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a5e      	ldr	r2, [pc, #376]	; (8000b3c <HAL_RCC_OscConfig+0x33c>)
 80009c4:	4013      	ands	r3, r2
 80009c6:	0019      	movs	r1, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	691a      	ldr	r2, [r3, #16]
 80009cc:	4b57      	ldr	r3, [pc, #348]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 80009ce:	430a      	orrs	r2, r1
 80009d0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80009d2:	4b56      	ldr	r3, [pc, #344]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	4b55      	ldr	r3, [pc, #340]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 80009d8:	2180      	movs	r1, #128	; 0x80
 80009da:	0049      	lsls	r1, r1, #1
 80009dc:	430a      	orrs	r2, r1
 80009de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80009e0:	f7ff fdee 	bl	80005c0 <HAL_GetTick>
 80009e4:	0003      	movs	r3, r0
 80009e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80009e8:	e008      	b.n	80009fc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80009ea:	f7ff fde9 	bl	80005c0 <HAL_GetTick>
 80009ee:	0002      	movs	r2, r0
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d901      	bls.n	80009fc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80009f8:	2303      	movs	r3, #3
 80009fa:	e20f      	b.n	8000e1c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80009fc:	4b4b      	ldr	r3, [pc, #300]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	2380      	movs	r3, #128	; 0x80
 8000a02:	00db      	lsls	r3, r3, #3
 8000a04:	4013      	ands	r3, r2
 8000a06:	d0f0      	beq.n	80009ea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a08:	4b48      	ldr	r3, [pc, #288]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	4a4a      	ldr	r2, [pc, #296]	; (8000b38 <HAL_RCC_OscConfig+0x338>)
 8000a0e:	4013      	ands	r3, r2
 8000a10:	0019      	movs	r1, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	695b      	ldr	r3, [r3, #20]
 8000a16:	021a      	lsls	r2, r3, #8
 8000a18:	4b44      	ldr	r3, [pc, #272]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 8000a1a:	430a      	orrs	r2, r1
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	e01b      	b.n	8000a58 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000a20:	4b42      	ldr	r3, [pc, #264]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	4b41      	ldr	r3, [pc, #260]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 8000a26:	4949      	ldr	r1, [pc, #292]	; (8000b4c <HAL_RCC_OscConfig+0x34c>)
 8000a28:	400a      	ands	r2, r1
 8000a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a2c:	f7ff fdc8 	bl	80005c0 <HAL_GetTick>
 8000a30:	0003      	movs	r3, r0
 8000a32:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000a34:	e008      	b.n	8000a48 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a36:	f7ff fdc3 	bl	80005c0 <HAL_GetTick>
 8000a3a:	0002      	movs	r2, r0
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	1ad3      	subs	r3, r2, r3
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	d901      	bls.n	8000a48 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8000a44:	2303      	movs	r3, #3
 8000a46:	e1e9      	b.n	8000e1c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000a48:	4b38      	ldr	r3, [pc, #224]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	2380      	movs	r3, #128	; 0x80
 8000a4e:	00db      	lsls	r3, r3, #3
 8000a50:	4013      	ands	r3, r2
 8000a52:	d1f0      	bne.n	8000a36 <HAL_RCC_OscConfig+0x236>
 8000a54:	e000      	b.n	8000a58 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000a56:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2208      	movs	r2, #8
 8000a5e:	4013      	ands	r3, r2
 8000a60:	d047      	beq.n	8000af2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8000a62:	4b32      	ldr	r3, [pc, #200]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	2238      	movs	r2, #56	; 0x38
 8000a68:	4013      	ands	r3, r2
 8000a6a:	2b18      	cmp	r3, #24
 8000a6c:	d10a      	bne.n	8000a84 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000a6e:	4b2f      	ldr	r3, [pc, #188]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 8000a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a72:	2202      	movs	r2, #2
 8000a74:	4013      	ands	r3, r2
 8000a76:	d03c      	beq.n	8000af2 <HAL_RCC_OscConfig+0x2f2>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d138      	bne.n	8000af2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8000a80:	2301      	movs	r3, #1
 8000a82:	e1cb      	b.n	8000e1c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d019      	beq.n	8000ac0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000a8c:	4b27      	ldr	r3, [pc, #156]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 8000a8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a90:	4b26      	ldr	r3, [pc, #152]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 8000a92:	2101      	movs	r1, #1
 8000a94:	430a      	orrs	r2, r1
 8000a96:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a98:	f7ff fd92 	bl	80005c0 <HAL_GetTick>
 8000a9c:	0003      	movs	r3, r0
 8000a9e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000aa0:	e008      	b.n	8000ab4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000aa2:	f7ff fd8d 	bl	80005c0 <HAL_GetTick>
 8000aa6:	0002      	movs	r2, r0
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	2b02      	cmp	r3, #2
 8000aae:	d901      	bls.n	8000ab4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	e1b3      	b.n	8000e1c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000ab4:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 8000ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ab8:	2202      	movs	r2, #2
 8000aba:	4013      	ands	r3, r2
 8000abc:	d0f1      	beq.n	8000aa2 <HAL_RCC_OscConfig+0x2a2>
 8000abe:	e018      	b.n	8000af2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 8000ac2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ac4:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	438a      	bics	r2, r1
 8000aca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000acc:	f7ff fd78 	bl	80005c0 <HAL_GetTick>
 8000ad0:	0003      	movs	r3, r0
 8000ad2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000ad4:	e008      	b.n	8000ae8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ad6:	f7ff fd73 	bl	80005c0 <HAL_GetTick>
 8000ada:	0002      	movs	r2, r0
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	1ad3      	subs	r3, r2, r3
 8000ae0:	2b02      	cmp	r3, #2
 8000ae2:	d901      	bls.n	8000ae8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	e199      	b.n	8000e1c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000ae8:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 8000aea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aec:	2202      	movs	r2, #2
 8000aee:	4013      	ands	r3, r2
 8000af0:	d1f1      	bne.n	8000ad6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2204      	movs	r2, #4
 8000af8:	4013      	ands	r3, r2
 8000afa:	d100      	bne.n	8000afe <HAL_RCC_OscConfig+0x2fe>
 8000afc:	e0c6      	b.n	8000c8c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000afe:	231f      	movs	r3, #31
 8000b00:	18fb      	adds	r3, r7, r3
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	2238      	movs	r2, #56	; 0x38
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	2b20      	cmp	r3, #32
 8000b10:	d11e      	bne.n	8000b50 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_RCC_OscConfig+0x32c>)
 8000b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b16:	2202      	movs	r2, #2
 8000b18:	4013      	ands	r3, r2
 8000b1a:	d100      	bne.n	8000b1e <HAL_RCC_OscConfig+0x31e>
 8000b1c:	e0b6      	b.n	8000c8c <HAL_RCC_OscConfig+0x48c>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d000      	beq.n	8000b28 <HAL_RCC_OscConfig+0x328>
 8000b26:	e0b1      	b.n	8000c8c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	e177      	b.n	8000e1c <HAL_RCC_OscConfig+0x61c>
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	fffeffff 	.word	0xfffeffff
 8000b34:	fffbffff 	.word	0xfffbffff
 8000b38:	ffff80ff 	.word	0xffff80ff
 8000b3c:	ffffc7ff 	.word	0xffffc7ff
 8000b40:	00f42400 	.word	0x00f42400
 8000b44:	20000000 	.word	0x20000000
 8000b48:	20000004 	.word	0x20000004
 8000b4c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000b50:	4bb4      	ldr	r3, [pc, #720]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000b52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b54:	2380      	movs	r3, #128	; 0x80
 8000b56:	055b      	lsls	r3, r3, #21
 8000b58:	4013      	ands	r3, r2
 8000b5a:	d101      	bne.n	8000b60 <HAL_RCC_OscConfig+0x360>
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	e000      	b.n	8000b62 <HAL_RCC_OscConfig+0x362>
 8000b60:	2300      	movs	r3, #0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d011      	beq.n	8000b8a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	4baf      	ldr	r3, [pc, #700]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000b68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b6a:	4bae      	ldr	r3, [pc, #696]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000b6c:	2180      	movs	r1, #128	; 0x80
 8000b6e:	0549      	lsls	r1, r1, #21
 8000b70:	430a      	orrs	r2, r1
 8000b72:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b74:	4bab      	ldr	r3, [pc, #684]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000b76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b78:	2380      	movs	r3, #128	; 0x80
 8000b7a:	055b      	lsls	r3, r3, #21
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8000b82:	231f      	movs	r3, #31
 8000b84:	18fb      	adds	r3, r7, r3
 8000b86:	2201      	movs	r2, #1
 8000b88:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000b8a:	4ba7      	ldr	r3, [pc, #668]	; (8000e28 <HAL_RCC_OscConfig+0x628>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	2380      	movs	r3, #128	; 0x80
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	4013      	ands	r3, r2
 8000b94:	d11a      	bne.n	8000bcc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000b96:	4ba4      	ldr	r3, [pc, #656]	; (8000e28 <HAL_RCC_OscConfig+0x628>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	4ba3      	ldr	r3, [pc, #652]	; (8000e28 <HAL_RCC_OscConfig+0x628>)
 8000b9c:	2180      	movs	r1, #128	; 0x80
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8000ba4:	f7ff fd0c 	bl	80005c0 <HAL_GetTick>
 8000ba8:	0003      	movs	r3, r0
 8000baa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000bac:	e008      	b.n	8000bc0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000bae:	f7ff fd07 	bl	80005c0 <HAL_GetTick>
 8000bb2:	0002      	movs	r2, r0
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	1ad3      	subs	r3, r2, r3
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d901      	bls.n	8000bc0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	e12d      	b.n	8000e1c <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000bc0:	4b99      	ldr	r3, [pc, #612]	; (8000e28 <HAL_RCC_OscConfig+0x628>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	4013      	ands	r3, r2
 8000bca:	d0f0      	beq.n	8000bae <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d106      	bne.n	8000be2 <HAL_RCC_OscConfig+0x3e2>
 8000bd4:	4b93      	ldr	r3, [pc, #588]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000bd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000bd8:	4b92      	ldr	r3, [pc, #584]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000bda:	2101      	movs	r1, #1
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	65da      	str	r2, [r3, #92]	; 0x5c
 8000be0:	e01c      	b.n	8000c1c <HAL_RCC_OscConfig+0x41c>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	2b05      	cmp	r3, #5
 8000be8:	d10c      	bne.n	8000c04 <HAL_RCC_OscConfig+0x404>
 8000bea:	4b8e      	ldr	r3, [pc, #568]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000bec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000bee:	4b8d      	ldr	r3, [pc, #564]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000bf0:	2104      	movs	r1, #4
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	65da      	str	r2, [r3, #92]	; 0x5c
 8000bf6:	4b8b      	ldr	r3, [pc, #556]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000bf8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000bfa:	4b8a      	ldr	r3, [pc, #552]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	65da      	str	r2, [r3, #92]	; 0x5c
 8000c02:	e00b      	b.n	8000c1c <HAL_RCC_OscConfig+0x41c>
 8000c04:	4b87      	ldr	r3, [pc, #540]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000c06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000c08:	4b86      	ldr	r3, [pc, #536]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	438a      	bics	r2, r1
 8000c0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8000c10:	4b84      	ldr	r3, [pc, #528]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000c12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000c14:	4b83      	ldr	r3, [pc, #524]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000c16:	2104      	movs	r1, #4
 8000c18:	438a      	bics	r2, r1
 8000c1a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d014      	beq.n	8000c4e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c24:	f7ff fccc 	bl	80005c0 <HAL_GetTick>
 8000c28:	0003      	movs	r3, r0
 8000c2a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000c2c:	e009      	b.n	8000c42 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c2e:	f7ff fcc7 	bl	80005c0 <HAL_GetTick>
 8000c32:	0002      	movs	r2, r0
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	4a7c      	ldr	r2, [pc, #496]	; (8000e2c <HAL_RCC_OscConfig+0x62c>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d901      	bls.n	8000c42 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	e0ec      	b.n	8000e1c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000c42:	4b78      	ldr	r3, [pc, #480]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c46:	2202      	movs	r2, #2
 8000c48:	4013      	ands	r3, r2
 8000c4a:	d0f0      	beq.n	8000c2e <HAL_RCC_OscConfig+0x42e>
 8000c4c:	e013      	b.n	8000c76 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c4e:	f7ff fcb7 	bl	80005c0 <HAL_GetTick>
 8000c52:	0003      	movs	r3, r0
 8000c54:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000c56:	e009      	b.n	8000c6c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c58:	f7ff fcb2 	bl	80005c0 <HAL_GetTick>
 8000c5c:	0002      	movs	r2, r0
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	4a72      	ldr	r2, [pc, #456]	; (8000e2c <HAL_RCC_OscConfig+0x62c>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d901      	bls.n	8000c6c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	e0d7      	b.n	8000e1c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000c6c:	4b6d      	ldr	r3, [pc, #436]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c70:	2202      	movs	r2, #2
 8000c72:	4013      	ands	r3, r2
 8000c74:	d1f0      	bne.n	8000c58 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8000c76:	231f      	movs	r3, #31
 8000c78:	18fb      	adds	r3, r7, r3
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d105      	bne.n	8000c8c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8000c80:	4b68      	ldr	r3, [pc, #416]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c84:	4b67      	ldr	r3, [pc, #412]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000c86:	496a      	ldr	r1, [pc, #424]	; (8000e30 <HAL_RCC_OscConfig+0x630>)
 8000c88:	400a      	ands	r2, r1
 8000c8a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	69db      	ldr	r3, [r3, #28]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d100      	bne.n	8000c96 <HAL_RCC_OscConfig+0x496>
 8000c94:	e0c1      	b.n	8000e1a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000c96:	4b63      	ldr	r3, [pc, #396]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	2238      	movs	r2, #56	; 0x38
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	2b10      	cmp	r3, #16
 8000ca0:	d100      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x4a4>
 8000ca2:	e081      	b.n	8000da8 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	69db      	ldr	r3, [r3, #28]
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d156      	bne.n	8000d5a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000cac:	4b5d      	ldr	r3, [pc, #372]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b5c      	ldr	r3, [pc, #368]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000cb2:	4960      	ldr	r1, [pc, #384]	; (8000e34 <HAL_RCC_OscConfig+0x634>)
 8000cb4:	400a      	ands	r2, r1
 8000cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cb8:	f7ff fc82 	bl	80005c0 <HAL_GetTick>
 8000cbc:	0003      	movs	r3, r0
 8000cbe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000cc0:	e008      	b.n	8000cd4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000cc2:	f7ff fc7d 	bl	80005c0 <HAL_GetTick>
 8000cc6:	0002      	movs	r2, r0
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d901      	bls.n	8000cd4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	e0a3      	b.n	8000e1c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000cd4:	4b53      	ldr	r3, [pc, #332]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	2380      	movs	r3, #128	; 0x80
 8000cda:	049b      	lsls	r3, r3, #18
 8000cdc:	4013      	ands	r3, r2
 8000cde:	d1f0      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ce0:	4b50      	ldr	r3, [pc, #320]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	4a54      	ldr	r2, [pc, #336]	; (8000e38 <HAL_RCC_OscConfig+0x638>)
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	0019      	movs	r1, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6a1a      	ldr	r2, [r3, #32]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf2:	431a      	orrs	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf8:	021b      	lsls	r3, r3, #8
 8000cfa:	431a      	orrs	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d00:	431a      	orrs	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	431a      	orrs	r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	4b45      	ldr	r3, [pc, #276]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000d10:	430a      	orrs	r2, r1
 8000d12:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000d14:	4b43      	ldr	r3, [pc, #268]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b42      	ldr	r3, [pc, #264]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000d1a:	2180      	movs	r1, #128	; 0x80
 8000d1c:	0449      	lsls	r1, r1, #17
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8000d22:	4b40      	ldr	r3, [pc, #256]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000d24:	68da      	ldr	r2, [r3, #12]
 8000d26:	4b3f      	ldr	r3, [pc, #252]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000d28:	2180      	movs	r1, #128	; 0x80
 8000d2a:	0549      	lsls	r1, r1, #21
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d30:	f7ff fc46 	bl	80005c0 <HAL_GetTick>
 8000d34:	0003      	movs	r3, r0
 8000d36:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000d38:	e008      	b.n	8000d4c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d3a:	f7ff fc41 	bl	80005c0 <HAL_GetTick>
 8000d3e:	0002      	movs	r2, r0
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d901      	bls.n	8000d4c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	e067      	b.n	8000e1c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000d4c:	4b35      	ldr	r3, [pc, #212]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	049b      	lsls	r3, r3, #18
 8000d54:	4013      	ands	r3, r2
 8000d56:	d0f0      	beq.n	8000d3a <HAL_RCC_OscConfig+0x53a>
 8000d58:	e05f      	b.n	8000e1a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d5a:	4b32      	ldr	r3, [pc, #200]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	4b31      	ldr	r3, [pc, #196]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000d60:	4934      	ldr	r1, [pc, #208]	; (8000e34 <HAL_RCC_OscConfig+0x634>)
 8000d62:	400a      	ands	r2, r1
 8000d64:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8000d66:	4b2f      	ldr	r3, [pc, #188]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000d68:	68da      	ldr	r2, [r3, #12]
 8000d6a:	4b2e      	ldr	r3, [pc, #184]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000d6c:	2103      	movs	r1, #3
 8000d6e:	438a      	bics	r2, r1
 8000d70:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8000d72:	4b2c      	ldr	r3, [pc, #176]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000d74:	68da      	ldr	r2, [r3, #12]
 8000d76:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000d78:	4930      	ldr	r1, [pc, #192]	; (8000e3c <HAL_RCC_OscConfig+0x63c>)
 8000d7a:	400a      	ands	r2, r1
 8000d7c:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d7e:	f7ff fc1f 	bl	80005c0 <HAL_GetTick>
 8000d82:	0003      	movs	r3, r0
 8000d84:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000d86:	e008      	b.n	8000d9a <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d88:	f7ff fc1a 	bl	80005c0 <HAL_GetTick>
 8000d8c:	0002      	movs	r2, r0
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d901      	bls.n	8000d9a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8000d96:	2303      	movs	r3, #3
 8000d98:	e040      	b.n	8000e1c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000d9a:	4b22      	ldr	r3, [pc, #136]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	2380      	movs	r3, #128	; 0x80
 8000da0:	049b      	lsls	r3, r3, #18
 8000da2:	4013      	ands	r3, r2
 8000da4:	d1f0      	bne.n	8000d88 <HAL_RCC_OscConfig+0x588>
 8000da6:	e038      	b.n	8000e1a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	69db      	ldr	r3, [r3, #28]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d101      	bne.n	8000db4 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	e033      	b.n	8000e1c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8000db4:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <HAL_RCC_OscConfig+0x624>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6a1b      	ldr	r3, [r3, #32]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d126      	bne.n	8000e16 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	2270      	movs	r2, #112	; 0x70
 8000dcc:	401a      	ands	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d11f      	bne.n	8000e16 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	23fe      	movs	r3, #254	; 0xfe
 8000dda:	01db      	lsls	r3, r3, #7
 8000ddc:	401a      	ands	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de2:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d116      	bne.n	8000e16 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000de8:	697a      	ldr	r2, [r7, #20]
 8000dea:	23f8      	movs	r3, #248	; 0xf8
 8000dec:	039b      	lsls	r3, r3, #14
 8000dee:	401a      	ands	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d10e      	bne.n	8000e16 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8000df8:	697a      	ldr	r2, [r7, #20]
 8000dfa:	23e0      	movs	r3, #224	; 0xe0
 8000dfc:	051b      	lsls	r3, r3, #20
 8000dfe:	401a      	ands	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d106      	bne.n	8000e16 <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	0f5b      	lsrs	r3, r3, #29
 8000e0c:	075a      	lsls	r2, r3, #29
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d001      	beq.n	8000e1a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e000      	b.n	8000e1c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
}
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b008      	add	sp, #32
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40007000 	.word	0x40007000
 8000e2c:	00001388 	.word	0x00001388
 8000e30:	efffffff 	.word	0xefffffff
 8000e34:	feffffff 	.word	0xfeffffff
 8000e38:	11c1808c 	.word	0x11c1808c
 8000e3c:	eefeffff 	.word	0xeefeffff

08000e40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d101      	bne.n	8000e54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e0e9      	b.n	8001028 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000e54:	4b76      	ldr	r3, [pc, #472]	; (8001030 <HAL_RCC_ClockConfig+0x1f0>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2207      	movs	r2, #7
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	683a      	ldr	r2, [r7, #0]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d91e      	bls.n	8000ea0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e62:	4b73      	ldr	r3, [pc, #460]	; (8001030 <HAL_RCC_ClockConfig+0x1f0>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2207      	movs	r2, #7
 8000e68:	4393      	bics	r3, r2
 8000e6a:	0019      	movs	r1, r3
 8000e6c:	4b70      	ldr	r3, [pc, #448]	; (8001030 <HAL_RCC_ClockConfig+0x1f0>)
 8000e6e:	683a      	ldr	r2, [r7, #0]
 8000e70:	430a      	orrs	r2, r1
 8000e72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8000e74:	f7ff fba4 	bl	80005c0 <HAL_GetTick>
 8000e78:	0003      	movs	r3, r0
 8000e7a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e7c:	e009      	b.n	8000e92 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e7e:	f7ff fb9f 	bl	80005c0 <HAL_GetTick>
 8000e82:	0002      	movs	r2, r0
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	4a6a      	ldr	r2, [pc, #424]	; (8001034 <HAL_RCC_ClockConfig+0x1f4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d901      	bls.n	8000e92 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e0ca      	b.n	8001028 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e92:	4b67      	ldr	r3, [pc, #412]	; (8001030 <HAL_RCC_ClockConfig+0x1f0>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2207      	movs	r2, #7
 8000e98:	4013      	ands	r3, r2
 8000e9a:	683a      	ldr	r2, [r7, #0]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d1ee      	bne.n	8000e7e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	d015      	beq.n	8000ed6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2204      	movs	r2, #4
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	d006      	beq.n	8000ec2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000eb4:	4b60      	ldr	r3, [pc, #384]	; (8001038 <HAL_RCC_ClockConfig+0x1f8>)
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	4b5f      	ldr	r3, [pc, #380]	; (8001038 <HAL_RCC_ClockConfig+0x1f8>)
 8000eba:	21e0      	movs	r1, #224	; 0xe0
 8000ebc:	01c9      	lsls	r1, r1, #7
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ec2:	4b5d      	ldr	r3, [pc, #372]	; (8001038 <HAL_RCC_ClockConfig+0x1f8>)
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	4a5d      	ldr	r2, [pc, #372]	; (800103c <HAL_RCC_ClockConfig+0x1fc>)
 8000ec8:	4013      	ands	r3, r2
 8000eca:	0019      	movs	r1, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	4b59      	ldr	r3, [pc, #356]	; (8001038 <HAL_RCC_ClockConfig+0x1f8>)
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2201      	movs	r2, #1
 8000edc:	4013      	ands	r3, r2
 8000ede:	d057      	beq.n	8000f90 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d107      	bne.n	8000ef8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ee8:	4b53      	ldr	r3, [pc, #332]	; (8001038 <HAL_RCC_ClockConfig+0x1f8>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	029b      	lsls	r3, r3, #10
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d12b      	bne.n	8000f4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e097      	b.n	8001028 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d107      	bne.n	8000f10 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f00:	4b4d      	ldr	r3, [pc, #308]	; (8001038 <HAL_RCC_ClockConfig+0x1f8>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	049b      	lsls	r3, r3, #18
 8000f08:	4013      	ands	r3, r2
 8000f0a:	d11f      	bne.n	8000f4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e08b      	b.n	8001028 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d107      	bne.n	8000f28 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f18:	4b47      	ldr	r3, [pc, #284]	; (8001038 <HAL_RCC_ClockConfig+0x1f8>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	4013      	ands	r3, r2
 8000f22:	d113      	bne.n	8000f4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e07f      	b.n	8001028 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	d106      	bne.n	8000f3e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f30:	4b41      	ldr	r3, [pc, #260]	; (8001038 <HAL_RCC_ClockConfig+0x1f8>)
 8000f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f34:	2202      	movs	r2, #2
 8000f36:	4013      	ands	r3, r2
 8000f38:	d108      	bne.n	8000f4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e074      	b.n	8001028 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000f3e:	4b3e      	ldr	r3, [pc, #248]	; (8001038 <HAL_RCC_ClockConfig+0x1f8>)
 8000f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f42:	2202      	movs	r2, #2
 8000f44:	4013      	ands	r3, r2
 8000f46:	d101      	bne.n	8000f4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e06d      	b.n	8001028 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000f4c:	4b3a      	ldr	r3, [pc, #232]	; (8001038 <HAL_RCC_ClockConfig+0x1f8>)
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	2207      	movs	r2, #7
 8000f52:	4393      	bics	r3, r2
 8000f54:	0019      	movs	r1, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	4b37      	ldr	r3, [pc, #220]	; (8001038 <HAL_RCC_ClockConfig+0x1f8>)
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000f60:	f7ff fb2e 	bl	80005c0 <HAL_GetTick>
 8000f64:	0003      	movs	r3, r0
 8000f66:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f68:	e009      	b.n	8000f7e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f6a:	f7ff fb29 	bl	80005c0 <HAL_GetTick>
 8000f6e:	0002      	movs	r2, r0
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	4a2f      	ldr	r2, [pc, #188]	; (8001034 <HAL_RCC_ClockConfig+0x1f4>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d901      	bls.n	8000f7e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e054      	b.n	8001028 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f7e:	4b2e      	ldr	r3, [pc, #184]	; (8001038 <HAL_RCC_ClockConfig+0x1f8>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	2238      	movs	r2, #56	; 0x38
 8000f84:	401a      	ands	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d1ec      	bne.n	8000f6a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000f90:	4b27      	ldr	r3, [pc, #156]	; (8001030 <HAL_RCC_ClockConfig+0x1f0>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2207      	movs	r2, #7
 8000f96:	4013      	ands	r3, r2
 8000f98:	683a      	ldr	r2, [r7, #0]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d21e      	bcs.n	8000fdc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f9e:	4b24      	ldr	r3, [pc, #144]	; (8001030 <HAL_RCC_ClockConfig+0x1f0>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2207      	movs	r2, #7
 8000fa4:	4393      	bics	r3, r2
 8000fa6:	0019      	movs	r1, r3
 8000fa8:	4b21      	ldr	r3, [pc, #132]	; (8001030 <HAL_RCC_ClockConfig+0x1f0>)
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	430a      	orrs	r2, r1
 8000fae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8000fb0:	f7ff fb06 	bl	80005c0 <HAL_GetTick>
 8000fb4:	0003      	movs	r3, r0
 8000fb6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000fb8:	e009      	b.n	8000fce <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fba:	f7ff fb01 	bl	80005c0 <HAL_GetTick>
 8000fbe:	0002      	movs	r2, r0
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	4a1b      	ldr	r2, [pc, #108]	; (8001034 <HAL_RCC_ClockConfig+0x1f4>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d901      	bls.n	8000fce <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e02c      	b.n	8001028 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000fce:	4b18      	ldr	r3, [pc, #96]	; (8001030 <HAL_RCC_ClockConfig+0x1f0>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2207      	movs	r2, #7
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d1ee      	bne.n	8000fba <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2204      	movs	r2, #4
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	d009      	beq.n	8000ffa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000fe6:	4b14      	ldr	r3, [pc, #80]	; (8001038 <HAL_RCC_ClockConfig+0x1f8>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	4a15      	ldr	r2, [pc, #84]	; (8001040 <HAL_RCC_ClockConfig+0x200>)
 8000fec:	4013      	ands	r3, r2
 8000fee:	0019      	movs	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68da      	ldr	r2, [r3, #12]
 8000ff4:	4b10      	ldr	r3, [pc, #64]	; (8001038 <HAL_RCC_ClockConfig+0x1f8>)
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8000ffa:	f000 f829 	bl	8001050 <HAL_RCC_GetSysClockFreq>
 8000ffe:	0001      	movs	r1, r0
 8001000:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <HAL_RCC_ClockConfig+0x1f8>)
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	220f      	movs	r2, #15
 8001008:	401a      	ands	r2, r3
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <HAL_RCC_ClockConfig+0x204>)
 800100c:	0092      	lsls	r2, r2, #2
 800100e:	58d3      	ldr	r3, [r2, r3]
 8001010:	221f      	movs	r2, #31
 8001012:	4013      	ands	r3, r2
 8001014:	000a      	movs	r2, r1
 8001016:	40da      	lsrs	r2, r3
 8001018:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <HAL_RCC_ClockConfig+0x208>)
 800101a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <HAL_RCC_ClockConfig+0x20c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	0018      	movs	r0, r3
 8001022:	f7ff fa73 	bl	800050c <HAL_InitTick>
 8001026:	0003      	movs	r3, r0
}
 8001028:	0018      	movs	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	b004      	add	sp, #16
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40022000 	.word	0x40022000
 8001034:	00001388 	.word	0x00001388
 8001038:	40021000 	.word	0x40021000
 800103c:	fffff0ff 	.word	0xfffff0ff
 8001040:	ffff8fff 	.word	0xffff8fff
 8001044:	08002080 	.word	0x08002080
 8001048:	20000000 	.word	0x20000000
 800104c:	20000004 	.word	0x20000004

08001050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001056:	4b3c      	ldr	r3, [pc, #240]	; (8001148 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	2238      	movs	r2, #56	; 0x38
 800105c:	4013      	ands	r3, r2
 800105e:	d10f      	bne.n	8001080 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001060:	4b39      	ldr	r3, [pc, #228]	; (8001148 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	0adb      	lsrs	r3, r3, #11
 8001066:	2207      	movs	r2, #7
 8001068:	4013      	ands	r3, r2
 800106a:	2201      	movs	r2, #1
 800106c:	409a      	lsls	r2, r3
 800106e:	0013      	movs	r3, r2
 8001070:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001072:	6839      	ldr	r1, [r7, #0]
 8001074:	4835      	ldr	r0, [pc, #212]	; (800114c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001076:	f7ff f84d 	bl	8000114 <__udivsi3>
 800107a:	0003      	movs	r3, r0
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	e05d      	b.n	800113c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001080:	4b31      	ldr	r3, [pc, #196]	; (8001148 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	2238      	movs	r2, #56	; 0x38
 8001086:	4013      	ands	r3, r2
 8001088:	2b08      	cmp	r3, #8
 800108a:	d102      	bne.n	8001092 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800108c:	4b30      	ldr	r3, [pc, #192]	; (8001150 <HAL_RCC_GetSysClockFreq+0x100>)
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	e054      	b.n	800113c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001092:	4b2d      	ldr	r3, [pc, #180]	; (8001148 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	2238      	movs	r2, #56	; 0x38
 8001098:	4013      	ands	r3, r2
 800109a:	2b10      	cmp	r3, #16
 800109c:	d138      	bne.n	8001110 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800109e:	4b2a      	ldr	r3, [pc, #168]	; (8001148 <HAL_RCC_GetSysClockFreq+0xf8>)
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	2203      	movs	r2, #3
 80010a4:	4013      	ands	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80010a8:	4b27      	ldr	r3, [pc, #156]	; (8001148 <HAL_RCC_GetSysClockFreq+0xf8>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	091b      	lsrs	r3, r3, #4
 80010ae:	2207      	movs	r2, #7
 80010b0:	4013      	ands	r3, r2
 80010b2:	3301      	adds	r3, #1
 80010b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	d10d      	bne.n	80010d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80010bc:	68b9      	ldr	r1, [r7, #8]
 80010be:	4824      	ldr	r0, [pc, #144]	; (8001150 <HAL_RCC_GetSysClockFreq+0x100>)
 80010c0:	f7ff f828 	bl	8000114 <__udivsi3>
 80010c4:	0003      	movs	r3, r0
 80010c6:	0019      	movs	r1, r3
 80010c8:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <HAL_RCC_GetSysClockFreq+0xf8>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	0a1b      	lsrs	r3, r3, #8
 80010ce:	227f      	movs	r2, #127	; 0x7f
 80010d0:	4013      	ands	r3, r2
 80010d2:	434b      	muls	r3, r1
 80010d4:	617b      	str	r3, [r7, #20]
        break;
 80010d6:	e00d      	b.n	80010f4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	481c      	ldr	r0, [pc, #112]	; (800114c <HAL_RCC_GetSysClockFreq+0xfc>)
 80010dc:	f7ff f81a 	bl	8000114 <__udivsi3>
 80010e0:	0003      	movs	r3, r0
 80010e2:	0019      	movs	r1, r3
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <HAL_RCC_GetSysClockFreq+0xf8>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	0a1b      	lsrs	r3, r3, #8
 80010ea:	227f      	movs	r2, #127	; 0x7f
 80010ec:	4013      	ands	r3, r2
 80010ee:	434b      	muls	r3, r1
 80010f0:	617b      	str	r3, [r7, #20]
        break;
 80010f2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <HAL_RCC_GetSysClockFreq+0xf8>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	0f5b      	lsrs	r3, r3, #29
 80010fa:	2207      	movs	r2, #7
 80010fc:	4013      	ands	r3, r2
 80010fe:	3301      	adds	r3, #1
 8001100:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	6978      	ldr	r0, [r7, #20]
 8001106:	f7ff f805 	bl	8000114 <__udivsi3>
 800110a:	0003      	movs	r3, r0
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	e015      	b.n	800113c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	2238      	movs	r2, #56	; 0x38
 8001116:	4013      	ands	r3, r2
 8001118:	2b20      	cmp	r3, #32
 800111a:	d103      	bne.n	8001124 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	e00b      	b.n	800113c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	2238      	movs	r2, #56	; 0x38
 800112a:	4013      	ands	r3, r2
 800112c:	2b18      	cmp	r3, #24
 800112e:	d103      	bne.n	8001138 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001130:	23fa      	movs	r3, #250	; 0xfa
 8001132:	01db      	lsls	r3, r3, #7
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	e001      	b.n	800113c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001138:	2300      	movs	r3, #0
 800113a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800113c:	693b      	ldr	r3, [r7, #16]
}
 800113e:	0018      	movs	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	b006      	add	sp, #24
 8001144:	bd80      	pop	{r7, pc}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	40021000 	.word	0x40021000
 800114c:	00f42400 	.word	0x00f42400
 8001150:	007a1200 	.word	0x007a1200

08001154 <findslot>:
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <findslot+0x2c>)
 8001156:	b510      	push	{r4, lr}
 8001158:	0004      	movs	r4, r0
 800115a:	6818      	ldr	r0, [r3, #0]
 800115c:	2800      	cmp	r0, #0
 800115e:	d004      	beq.n	800116a <findslot+0x16>
 8001160:	6983      	ldr	r3, [r0, #24]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <findslot+0x16>
 8001166:	f000 fadf 	bl	8001728 <__sinit>
 800116a:	2000      	movs	r0, #0
 800116c:	2c13      	cmp	r4, #19
 800116e:	d805      	bhi.n	800117c <findslot+0x28>
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <findslot+0x30>)
 8001172:	00e4      	lsls	r4, r4, #3
 8001174:	58e2      	ldr	r2, [r4, r3]
 8001176:	3201      	adds	r2, #1
 8001178:	d000      	beq.n	800117c <findslot+0x28>
 800117a:	18e0      	adds	r0, r4, r3
 800117c:	bd10      	pop	{r4, pc}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	20000014 	.word	0x20000014
 8001184:	200000a4 	.word	0x200000a4

08001188 <checkerror>:
 8001188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800118a:	0005      	movs	r5, r0
 800118c:	1c43      	adds	r3, r0, #1
 800118e:	d109      	bne.n	80011a4 <checkerror+0x1c>
 8001190:	f000 fa82 	bl	8001698 <__errno>
 8001194:	2413      	movs	r4, #19
 8001196:	0006      	movs	r6, r0
 8001198:	2700      	movs	r7, #0
 800119a:	1c20      	adds	r0, r4, #0
 800119c:	1c39      	adds	r1, r7, #0
 800119e:	beab      	bkpt	0x00ab
 80011a0:	1c04      	adds	r4, r0, #0
 80011a2:	6034      	str	r4, [r6, #0]
 80011a4:	0028      	movs	r0, r5
 80011a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080011a8 <error>:
 80011a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011aa:	0005      	movs	r5, r0
 80011ac:	f000 fa74 	bl	8001698 <__errno>
 80011b0:	2413      	movs	r4, #19
 80011b2:	0006      	movs	r6, r0
 80011b4:	2700      	movs	r7, #0
 80011b6:	1c20      	adds	r0, r4, #0
 80011b8:	1c39      	adds	r1, r7, #0
 80011ba:	beab      	bkpt	0x00ab
 80011bc:	1c04      	adds	r4, r0, #0
 80011be:	0028      	movs	r0, r5
 80011c0:	6034      	str	r4, [r6, #0]
 80011c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080011c4 <_swiread>:
 80011c4:	b530      	push	{r4, r5, lr}
 80011c6:	b085      	sub	sp, #20
 80011c8:	ad01      	add	r5, sp, #4
 80011ca:	9001      	str	r0, [sp, #4]
 80011cc:	9102      	str	r1, [sp, #8]
 80011ce:	9203      	str	r2, [sp, #12]
 80011d0:	2406      	movs	r4, #6
 80011d2:	1c20      	adds	r0, r4, #0
 80011d4:	1c29      	adds	r1, r5, #0
 80011d6:	beab      	bkpt	0x00ab
 80011d8:	1c04      	adds	r4, r0, #0
 80011da:	0020      	movs	r0, r4
 80011dc:	f7ff ffd4 	bl	8001188 <checkerror>
 80011e0:	b005      	add	sp, #20
 80011e2:	bd30      	pop	{r4, r5, pc}

080011e4 <_read>:
 80011e4:	b570      	push	{r4, r5, r6, lr}
 80011e6:	000e      	movs	r6, r1
 80011e8:	0015      	movs	r5, r2
 80011ea:	f7ff ffb3 	bl	8001154 <findslot>
 80011ee:	1e04      	subs	r4, r0, #0
 80011f0:	d106      	bne.n	8001200 <_read+0x1c>
 80011f2:	f000 fa51 	bl	8001698 <__errno>
 80011f6:	2309      	movs	r3, #9
 80011f8:	6003      	str	r3, [r0, #0]
 80011fa:	2001      	movs	r0, #1
 80011fc:	4240      	negs	r0, r0
 80011fe:	bd70      	pop	{r4, r5, r6, pc}
 8001200:	002a      	movs	r2, r5
 8001202:	0031      	movs	r1, r6
 8001204:	6800      	ldr	r0, [r0, #0]
 8001206:	f7ff ffdd 	bl	80011c4 <_swiread>
 800120a:	1c43      	adds	r3, r0, #1
 800120c:	d0f7      	beq.n	80011fe <_read+0x1a>
 800120e:	6863      	ldr	r3, [r4, #4]
 8001210:	1a28      	subs	r0, r5, r0
 8001212:	181b      	adds	r3, r3, r0
 8001214:	6063      	str	r3, [r4, #4]
 8001216:	e7f2      	b.n	80011fe <_read+0x1a>

08001218 <_swilseek>:
 8001218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800121a:	000c      	movs	r4, r1
 800121c:	0016      	movs	r6, r2
 800121e:	f7ff ff99 	bl	8001154 <findslot>
 8001222:	1e05      	subs	r5, r0, #0
 8001224:	d107      	bne.n	8001236 <_swilseek+0x1e>
 8001226:	f000 fa37 	bl	8001698 <__errno>
 800122a:	2309      	movs	r3, #9
 800122c:	6003      	str	r3, [r0, #0]
 800122e:	2401      	movs	r4, #1
 8001230:	4264      	negs	r4, r4
 8001232:	0020      	movs	r0, r4
 8001234:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001236:	2e02      	cmp	r6, #2
 8001238:	d903      	bls.n	8001242 <_swilseek+0x2a>
 800123a:	f000 fa2d 	bl	8001698 <__errno>
 800123e:	2316      	movs	r3, #22
 8001240:	e7f4      	b.n	800122c <_swilseek+0x14>
 8001242:	2e01      	cmp	r6, #1
 8001244:	d112      	bne.n	800126c <_swilseek+0x54>
 8001246:	6843      	ldr	r3, [r0, #4]
 8001248:	18e4      	adds	r4, r4, r3
 800124a:	d4f6      	bmi.n	800123a <_swilseek+0x22>
 800124c:	466f      	mov	r7, sp
 800124e:	682b      	ldr	r3, [r5, #0]
 8001250:	260a      	movs	r6, #10
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	607c      	str	r4, [r7, #4]
 8001256:	1c30      	adds	r0, r6, #0
 8001258:	1c39      	adds	r1, r7, #0
 800125a:	beab      	bkpt	0x00ab
 800125c:	1c06      	adds	r6, r0, #0
 800125e:	0030      	movs	r0, r6
 8001260:	f7ff ff92 	bl	8001188 <checkerror>
 8001264:	2800      	cmp	r0, #0
 8001266:	dbe2      	blt.n	800122e <_swilseek+0x16>
 8001268:	606c      	str	r4, [r5, #4]
 800126a:	e7e2      	b.n	8001232 <_swilseek+0x1a>
 800126c:	2e02      	cmp	r6, #2
 800126e:	d1ed      	bne.n	800124c <_swilseek+0x34>
 8001270:	6803      	ldr	r3, [r0, #0]
 8001272:	466f      	mov	r7, sp
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	360a      	adds	r6, #10
 8001278:	1c30      	adds	r0, r6, #0
 800127a:	1c39      	adds	r1, r7, #0
 800127c:	beab      	bkpt	0x00ab
 800127e:	1c06      	adds	r6, r0, #0
 8001280:	0030      	movs	r0, r6
 8001282:	f7ff ff81 	bl	8001188 <checkerror>
 8001286:	1824      	adds	r4, r4, r0
 8001288:	1c43      	adds	r3, r0, #1
 800128a:	d1df      	bne.n	800124c <_swilseek+0x34>
 800128c:	e7cf      	b.n	800122e <_swilseek+0x16>

0800128e <_lseek>:
 800128e:	b510      	push	{r4, lr}
 8001290:	f7ff ffc2 	bl	8001218 <_swilseek>
 8001294:	bd10      	pop	{r4, pc}

08001296 <_swiwrite>:
 8001296:	b530      	push	{r4, r5, lr}
 8001298:	b085      	sub	sp, #20
 800129a:	ad01      	add	r5, sp, #4
 800129c:	9001      	str	r0, [sp, #4]
 800129e:	9102      	str	r1, [sp, #8]
 80012a0:	9203      	str	r2, [sp, #12]
 80012a2:	2405      	movs	r4, #5
 80012a4:	1c20      	adds	r0, r4, #0
 80012a6:	1c29      	adds	r1, r5, #0
 80012a8:	beab      	bkpt	0x00ab
 80012aa:	1c04      	adds	r4, r0, #0
 80012ac:	0020      	movs	r0, r4
 80012ae:	f7ff ff6b 	bl	8001188 <checkerror>
 80012b2:	b005      	add	sp, #20
 80012b4:	bd30      	pop	{r4, r5, pc}

080012b6 <_write>:
 80012b6:	b570      	push	{r4, r5, r6, lr}
 80012b8:	000e      	movs	r6, r1
 80012ba:	0015      	movs	r5, r2
 80012bc:	f7ff ff4a 	bl	8001154 <findslot>
 80012c0:	1e04      	subs	r4, r0, #0
 80012c2:	d106      	bne.n	80012d2 <_write+0x1c>
 80012c4:	f000 f9e8 	bl	8001698 <__errno>
 80012c8:	2309      	movs	r3, #9
 80012ca:	6003      	str	r3, [r0, #0]
 80012cc:	2001      	movs	r0, #1
 80012ce:	4240      	negs	r0, r0
 80012d0:	e00f      	b.n	80012f2 <_write+0x3c>
 80012d2:	002a      	movs	r2, r5
 80012d4:	0031      	movs	r1, r6
 80012d6:	6800      	ldr	r0, [r0, #0]
 80012d8:	f7ff ffdd 	bl	8001296 <_swiwrite>
 80012dc:	1e02      	subs	r2, r0, #0
 80012de:	dbf5      	blt.n	80012cc <_write+0x16>
 80012e0:	6863      	ldr	r3, [r4, #4]
 80012e2:	1a28      	subs	r0, r5, r0
 80012e4:	1819      	adds	r1, r3, r0
 80012e6:	6061      	str	r1, [r4, #4]
 80012e8:	42aa      	cmp	r2, r5
 80012ea:	d102      	bne.n	80012f2 <_write+0x3c>
 80012ec:	2000      	movs	r0, #0
 80012ee:	f7ff ff5b 	bl	80011a8 <error>
 80012f2:	bd70      	pop	{r4, r5, r6, pc}

080012f4 <_swiclose>:
 80012f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80012f6:	2402      	movs	r4, #2
 80012f8:	9001      	str	r0, [sp, #4]
 80012fa:	ad01      	add	r5, sp, #4
 80012fc:	1c20      	adds	r0, r4, #0
 80012fe:	1c29      	adds	r1, r5, #0
 8001300:	beab      	bkpt	0x00ab
 8001302:	1c04      	adds	r4, r0, #0
 8001304:	0020      	movs	r0, r4
 8001306:	f7ff ff3f 	bl	8001188 <checkerror>
 800130a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800130c <_close>:
 800130c:	b570      	push	{r4, r5, r6, lr}
 800130e:	0005      	movs	r5, r0
 8001310:	f7ff ff20 	bl	8001154 <findslot>
 8001314:	1e04      	subs	r4, r0, #0
 8001316:	d106      	bne.n	8001326 <_close+0x1a>
 8001318:	f000 f9be 	bl	8001698 <__errno>
 800131c:	2309      	movs	r3, #9
 800131e:	6003      	str	r3, [r0, #0]
 8001320:	2001      	movs	r0, #1
 8001322:	4240      	negs	r0, r0
 8001324:	bd70      	pop	{r4, r5, r6, pc}
 8001326:	3d01      	subs	r5, #1
 8001328:	2d01      	cmp	r5, #1
 800132a:	d809      	bhi.n	8001340 <_close+0x34>
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <_close+0x48>)
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	429a      	cmp	r2, r3
 8001334:	d104      	bne.n	8001340 <_close+0x34>
 8001336:	2301      	movs	r3, #1
 8001338:	425b      	negs	r3, r3
 800133a:	6003      	str	r3, [r0, #0]
 800133c:	2000      	movs	r0, #0
 800133e:	e7f1      	b.n	8001324 <_close+0x18>
 8001340:	6820      	ldr	r0, [r4, #0]
 8001342:	f7ff ffd7 	bl	80012f4 <_swiclose>
 8001346:	2800      	cmp	r0, #0
 8001348:	d1ec      	bne.n	8001324 <_close+0x18>
 800134a:	2301      	movs	r3, #1
 800134c:	425b      	negs	r3, r3
 800134e:	6023      	str	r3, [r4, #0]
 8001350:	e7e8      	b.n	8001324 <_close+0x18>
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	200000a4 	.word	0x200000a4

08001358 <_swistat>:
 8001358:	b570      	push	{r4, r5, r6, lr}
 800135a:	000c      	movs	r4, r1
 800135c:	f7ff fefa 	bl	8001154 <findslot>
 8001360:	1e06      	subs	r6, r0, #0
 8001362:	d106      	bne.n	8001372 <_swistat+0x1a>
 8001364:	f000 f998 	bl	8001698 <__errno>
 8001368:	2309      	movs	r3, #9
 800136a:	6003      	str	r3, [r0, #0]
 800136c:	2001      	movs	r0, #1
 800136e:	4240      	negs	r0, r0
 8001370:	bd70      	pop	{r4, r5, r6, pc}
 8001372:	2380      	movs	r3, #128	; 0x80
 8001374:	6862      	ldr	r2, [r4, #4]
 8001376:	019b      	lsls	r3, r3, #6
 8001378:	4313      	orrs	r3, r2
 800137a:	6063      	str	r3, [r4, #4]
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	6463      	str	r3, [r4, #68]	; 0x44
 8001382:	250c      	movs	r5, #12
 8001384:	1c28      	adds	r0, r5, #0
 8001386:	1c31      	adds	r1, r6, #0
 8001388:	beab      	bkpt	0x00ab
 800138a:	1c05      	adds	r5, r0, #0
 800138c:	0028      	movs	r0, r5
 800138e:	f7ff fefb 	bl	8001188 <checkerror>
 8001392:	1c43      	adds	r3, r0, #1
 8001394:	d0ec      	beq.n	8001370 <_swistat+0x18>
 8001396:	6120      	str	r0, [r4, #16]
 8001398:	2000      	movs	r0, #0
 800139a:	e7e9      	b.n	8001370 <_swistat+0x18>

0800139c <_fstat>:
 800139c:	b570      	push	{r4, r5, r6, lr}
 800139e:	000c      	movs	r4, r1
 80013a0:	0005      	movs	r5, r0
 80013a2:	2258      	movs	r2, #88	; 0x58
 80013a4:	2100      	movs	r1, #0
 80013a6:	0020      	movs	r0, r4
 80013a8:	f000 fa76 	bl	8001898 <memset>
 80013ac:	0028      	movs	r0, r5
 80013ae:	0021      	movs	r1, r4
 80013b0:	f7ff ffd2 	bl	8001358 <_swistat>
 80013b4:	bd70      	pop	{r4, r5, r6, pc}

080013b6 <_stat>:
 80013b6:	b570      	push	{r4, r5, r6, lr}
 80013b8:	000d      	movs	r5, r1
 80013ba:	0004      	movs	r4, r0
 80013bc:	2258      	movs	r2, #88	; 0x58
 80013be:	2100      	movs	r1, #0
 80013c0:	0028      	movs	r0, r5
 80013c2:	f000 fa69 	bl	8001898 <memset>
 80013c6:	0020      	movs	r0, r4
 80013c8:	2100      	movs	r1, #0
 80013ca:	f000 f813 	bl	80013f4 <_swiopen>
 80013ce:	0004      	movs	r4, r0
 80013d0:	1c43      	adds	r3, r0, #1
 80013d2:	d00c      	beq.n	80013ee <_stat+0x38>
 80013d4:	2381      	movs	r3, #129	; 0x81
 80013d6:	686a      	ldr	r2, [r5, #4]
 80013d8:	021b      	lsls	r3, r3, #8
 80013da:	4313      	orrs	r3, r2
 80013dc:	606b      	str	r3, [r5, #4]
 80013de:	0029      	movs	r1, r5
 80013e0:	f7ff ffba 	bl	8001358 <_swistat>
 80013e4:	0005      	movs	r5, r0
 80013e6:	0020      	movs	r0, r4
 80013e8:	f7ff ff90 	bl	800130c <_close>
 80013ec:	002c      	movs	r4, r5
 80013ee:	0020      	movs	r0, r4
 80013f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080013f4 <_swiopen>:
 80013f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f6:	000d      	movs	r5, r1
 80013f8:	2700      	movs	r7, #0
 80013fa:	b099      	sub	sp, #100	; 0x64
 80013fc:	9000      	str	r0, [sp, #0]
 80013fe:	00fb      	lsls	r3, r7, #3
 8001400:	9301      	str	r3, [sp, #4]
 8001402:	4b29      	ldr	r3, [pc, #164]	; (80014a8 <_swiopen+0xb4>)
 8001404:	00fa      	lsls	r2, r7, #3
 8001406:	589c      	ldr	r4, [r3, r2]
 8001408:	1c63      	adds	r3, r4, #1
 800140a:	d038      	beq.n	800147e <_swiopen+0x8a>
 800140c:	3701      	adds	r7, #1
 800140e:	2f14      	cmp	r7, #20
 8001410:	d1f5      	bne.n	80013fe <_swiopen+0xa>
 8001412:	f000 f941 	bl	8001698 <__errno>
 8001416:	2401      	movs	r4, #1
 8001418:	2318      	movs	r3, #24
 800141a:	4264      	negs	r4, r4
 800141c:	6003      	str	r3, [r0, #0]
 800141e:	e03f      	b.n	80014a0 <_swiopen+0xac>
 8001420:	2302      	movs	r3, #2
 8001422:	03ec      	lsls	r4, r5, #15
 8001424:	0fe4      	lsrs	r4, r4, #31
 8001426:	421d      	tst	r5, r3
 8001428:	d000      	beq.n	800142c <_swiopen+0x38>
 800142a:	431c      	orrs	r4, r3
 800142c:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <_swiopen+0xb8>)
 800142e:	421d      	tst	r5, r3
 8001430:	d001      	beq.n	8001436 <_swiopen+0x42>
 8001432:	2304      	movs	r3, #4
 8001434:	431c      	orrs	r4, r3
 8001436:	2308      	movs	r3, #8
 8001438:	421d      	tst	r5, r3
 800143a:	d002      	beq.n	8001442 <_swiopen+0x4e>
 800143c:	2204      	movs	r2, #4
 800143e:	4394      	bics	r4, r2
 8001440:	431c      	orrs	r4, r3
 8001442:	9b00      	ldr	r3, [sp, #0]
 8001444:	0018      	movs	r0, r3
 8001446:	9302      	str	r3, [sp, #8]
 8001448:	f7fe fe5c 	bl	8000104 <strlen>
 800144c:	6074      	str	r4, [r6, #4]
 800144e:	60b0      	str	r0, [r6, #8]
 8001450:	2401      	movs	r4, #1
 8001452:	1c20      	adds	r0, r4, #0
 8001454:	1c31      	adds	r1, r6, #0
 8001456:	beab      	bkpt	0x00ab
 8001458:	1c06      	adds	r6, r0, #0
 800145a:	2e00      	cmp	r6, #0
 800145c:	db0a      	blt.n	8001474 <_swiopen+0x80>
 800145e:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <_swiopen+0xb4>)
 8001460:	00fa      	lsls	r2, r7, #3
 8001462:	509e      	str	r6, [r3, r2]
 8001464:	0013      	movs	r3, r2
 8001466:	4a10      	ldr	r2, [pc, #64]	; (80014a8 <_swiopen+0xb4>)
 8001468:	003c      	movs	r4, r7
 800146a:	4694      	mov	ip, r2
 800146c:	2200      	movs	r2, #0
 800146e:	4463      	add	r3, ip
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	e015      	b.n	80014a0 <_swiopen+0xac>
 8001474:	0030      	movs	r0, r6
 8001476:	f7ff fe97 	bl	80011a8 <error>
 800147a:	0004      	movs	r4, r0
 800147c:	e010      	b.n	80014a0 <_swiopen+0xac>
 800147e:	23a0      	movs	r3, #160	; 0xa0
 8001480:	002a      	movs	r2, r5
 8001482:	011b      	lsls	r3, r3, #4
 8001484:	401a      	ands	r2, r3
 8001486:	ae02      	add	r6, sp, #8
 8001488:	429a      	cmp	r2, r3
 800148a:	d1c9      	bne.n	8001420 <_swiopen+0x2c>
 800148c:	0031      	movs	r1, r6
 800148e:	9800      	ldr	r0, [sp, #0]
 8001490:	f7ff ff91 	bl	80013b6 <_stat>
 8001494:	1c43      	adds	r3, r0, #1
 8001496:	d0c3      	beq.n	8001420 <_swiopen+0x2c>
 8001498:	f000 f8fe 	bl	8001698 <__errno>
 800149c:	2311      	movs	r3, #17
 800149e:	6003      	str	r3, [r0, #0]
 80014a0:	0020      	movs	r0, r4
 80014a2:	b019      	add	sp, #100	; 0x64
 80014a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	200000a4 	.word	0x200000a4
 80014ac:	00000601 	.word	0x00000601

080014b0 <_get_semihosting_exts>:
 80014b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014b2:	b085      	sub	sp, #20
 80014b4:	9000      	str	r0, [sp, #0]
 80014b6:	9101      	str	r1, [sp, #4]
 80014b8:	4827      	ldr	r0, [pc, #156]	; (8001558 <_get_semihosting_exts+0xa8>)
 80014ba:	2100      	movs	r1, #0
 80014bc:	0015      	movs	r5, r2
 80014be:	f7ff ff99 	bl	80013f4 <_swiopen>
 80014c2:	0004      	movs	r4, r0
 80014c4:	002a      	movs	r2, r5
 80014c6:	2100      	movs	r1, #0
 80014c8:	9800      	ldr	r0, [sp, #0]
 80014ca:	f000 f9e5 	bl	8001898 <memset>
 80014ce:	1c63      	adds	r3, r4, #1
 80014d0:	d015      	beq.n	80014fe <_get_semihosting_exts+0x4e>
 80014d2:	0020      	movs	r0, r4
 80014d4:	f7ff fe3e 	bl	8001154 <findslot>
 80014d8:	260c      	movs	r6, #12
 80014da:	0007      	movs	r7, r0
 80014dc:	1c30      	adds	r0, r6, #0
 80014de:	1c39      	adds	r1, r7, #0
 80014e0:	beab      	bkpt	0x00ab
 80014e2:	1c06      	adds	r6, r0, #0
 80014e4:	0030      	movs	r0, r6
 80014e6:	f7ff fe4f 	bl	8001188 <checkerror>
 80014ea:	2803      	cmp	r0, #3
 80014ec:	dd02      	ble.n	80014f4 <_get_semihosting_exts+0x44>
 80014ee:	3803      	subs	r0, #3
 80014f0:	42a8      	cmp	r0, r5
 80014f2:	dc07      	bgt.n	8001504 <_get_semihosting_exts+0x54>
 80014f4:	0020      	movs	r0, r4
 80014f6:	2401      	movs	r4, #1
 80014f8:	f7ff ff08 	bl	800130c <_close>
 80014fc:	4264      	negs	r4, r4
 80014fe:	0020      	movs	r0, r4
 8001500:	b005      	add	sp, #20
 8001502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001504:	ae03      	add	r6, sp, #12
 8001506:	2204      	movs	r2, #4
 8001508:	0031      	movs	r1, r6
 800150a:	0020      	movs	r0, r4
 800150c:	f7ff fe6a 	bl	80011e4 <_read>
 8001510:	2803      	cmp	r0, #3
 8001512:	ddef      	ble.n	80014f4 <_get_semihosting_exts+0x44>
 8001514:	7833      	ldrb	r3, [r6, #0]
 8001516:	2b53      	cmp	r3, #83	; 0x53
 8001518:	d1ec      	bne.n	80014f4 <_get_semihosting_exts+0x44>
 800151a:	7873      	ldrb	r3, [r6, #1]
 800151c:	2b48      	cmp	r3, #72	; 0x48
 800151e:	d1e9      	bne.n	80014f4 <_get_semihosting_exts+0x44>
 8001520:	78b3      	ldrb	r3, [r6, #2]
 8001522:	2b46      	cmp	r3, #70	; 0x46
 8001524:	d1e6      	bne.n	80014f4 <_get_semihosting_exts+0x44>
 8001526:	78f3      	ldrb	r3, [r6, #3]
 8001528:	2b42      	cmp	r3, #66	; 0x42
 800152a:	d1e3      	bne.n	80014f4 <_get_semihosting_exts+0x44>
 800152c:	2201      	movs	r2, #1
 800152e:	9901      	ldr	r1, [sp, #4]
 8001530:	0020      	movs	r0, r4
 8001532:	f7ff fe71 	bl	8001218 <_swilseek>
 8001536:	2800      	cmp	r0, #0
 8001538:	dbdc      	blt.n	80014f4 <_get_semihosting_exts+0x44>
 800153a:	002a      	movs	r2, r5
 800153c:	9900      	ldr	r1, [sp, #0]
 800153e:	0020      	movs	r0, r4
 8001540:	f7ff fe50 	bl	80011e4 <_read>
 8001544:	0005      	movs	r5, r0
 8001546:	0020      	movs	r0, r4
 8001548:	f7ff fee0 	bl	800130c <_close>
 800154c:	0028      	movs	r0, r5
 800154e:	f7ff fe1b 	bl	8001188 <checkerror>
 8001552:	0004      	movs	r4, r0
 8001554:	e7d3      	b.n	80014fe <_get_semihosting_exts+0x4e>
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	080020c0 	.word	0x080020c0

0800155c <initialise_semihosting_exts>:
 800155c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800155e:	2401      	movs	r4, #1
 8001560:	2100      	movs	r1, #0
 8001562:	4e09      	ldr	r6, [pc, #36]	; (8001588 <initialise_semihosting_exts+0x2c>)
 8001564:	4d09      	ldr	r5, [pc, #36]	; (800158c <initialise_semihosting_exts+0x30>)
 8001566:	af01      	add	r7, sp, #4
 8001568:	0022      	movs	r2, r4
 800156a:	0038      	movs	r0, r7
 800156c:	6031      	str	r1, [r6, #0]
 800156e:	602c      	str	r4, [r5, #0]
 8001570:	f7ff ff9e 	bl	80014b0 <_get_semihosting_exts>
 8001574:	2800      	cmp	r0, #0
 8001576:	dd05      	ble.n	8001584 <initialise_semihosting_exts+0x28>
 8001578:	2202      	movs	r2, #2
 800157a:	783b      	ldrb	r3, [r7, #0]
 800157c:	401c      	ands	r4, r3
 800157e:	4013      	ands	r3, r2
 8001580:	6034      	str	r4, [r6, #0]
 8001582:	602b      	str	r3, [r5, #0]
 8001584:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	2000000c 	.word	0x2000000c
 800158c:	20000010 	.word	0x20000010

08001590 <_has_ext_stdout_stderr>:
 8001590:	b510      	push	{r4, lr}
 8001592:	4c04      	ldr	r4, [pc, #16]	; (80015a4 <_has_ext_stdout_stderr+0x14>)
 8001594:	6823      	ldr	r3, [r4, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	da01      	bge.n	800159e <_has_ext_stdout_stderr+0xe>
 800159a:	f7ff ffdf 	bl	800155c <initialise_semihosting_exts>
 800159e:	6820      	ldr	r0, [r4, #0]
 80015a0:	bd10      	pop	{r4, pc}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	20000010 	.word	0x20000010

080015a8 <initialise_monitor_handles>:
 80015a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015aa:	4b27      	ldr	r3, [pc, #156]	; (8001648 <initialise_monitor_handles+0xa0>)
 80015ac:	b085      	sub	sp, #20
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	2500      	movs	r5, #0
 80015b2:	2303      	movs	r3, #3
 80015b4:	ac01      	add	r4, sp, #4
 80015b6:	60a3      	str	r3, [r4, #8]
 80015b8:	2701      	movs	r7, #1
 80015ba:	6065      	str	r5, [r4, #4]
 80015bc:	1c38      	adds	r0, r7, #0
 80015be:	1c21      	adds	r1, r4, #0
 80015c0:	beab      	bkpt	0x00ab
 80015c2:	1c07      	adds	r7, r0, #0
 80015c4:	2101      	movs	r1, #1
 80015c6:	4b21      	ldr	r3, [pc, #132]	; (800164c <initialise_monitor_handles+0xa4>)
 80015c8:	4249      	negs	r1, r1
 80015ca:	601f      	str	r7, [r3, #0]
 80015cc:	002b      	movs	r3, r5
 80015ce:	4d20      	ldr	r5, [pc, #128]	; (8001650 <initialise_monitor_handles+0xa8>)
 80015d0:	00da      	lsls	r2, r3, #3
 80015d2:	3301      	adds	r3, #1
 80015d4:	50a9      	str	r1, [r5, r2]
 80015d6:	2b14      	cmp	r3, #20
 80015d8:	d1fa      	bne.n	80015d0 <initialise_monitor_handles+0x28>
 80015da:	f7ff ffd9 	bl	8001590 <_has_ext_stdout_stderr>
 80015de:	2800      	cmp	r0, #0
 80015e0:	d018      	beq.n	8001614 <initialise_monitor_handles+0x6c>
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <initialise_monitor_handles+0xa0>)
 80015e4:	2701      	movs	r7, #1
 80015e6:	9301      	str	r3, [sp, #4]
 80015e8:	2303      	movs	r3, #3
 80015ea:	60a3      	str	r3, [r4, #8]
 80015ec:	3301      	adds	r3, #1
 80015ee:	6063      	str	r3, [r4, #4]
 80015f0:	1c38      	adds	r0, r7, #0
 80015f2:	1c21      	adds	r1, r4, #0
 80015f4:	beab      	bkpt	0x00ab
 80015f6:	1c06      	adds	r6, r0, #0
 80015f8:	4b16      	ldr	r3, [pc, #88]	; (8001654 <initialise_monitor_handles+0xac>)
 80015fa:	4a13      	ldr	r2, [pc, #76]	; (8001648 <initialise_monitor_handles+0xa0>)
 80015fc:	601e      	str	r6, [r3, #0]
 80015fe:	2303      	movs	r3, #3
 8001600:	9201      	str	r2, [sp, #4]
 8001602:	60a3      	str	r3, [r4, #8]
 8001604:	3305      	adds	r3, #5
 8001606:	6063      	str	r3, [r4, #4]
 8001608:	1c38      	adds	r0, r7, #0
 800160a:	1c21      	adds	r1, r4, #0
 800160c:	beab      	bkpt	0x00ab
 800160e:	1c04      	adds	r4, r0, #0
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <initialise_monitor_handles+0xb0>)
 8001612:	601c      	str	r4, [r3, #0]
 8001614:	4f10      	ldr	r7, [pc, #64]	; (8001658 <initialise_monitor_handles+0xb0>)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	3301      	adds	r3, #1
 800161a:	d102      	bne.n	8001622 <initialise_monitor_handles+0x7a>
 800161c:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <initialise_monitor_handles+0xac>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	603b      	str	r3, [r7, #0]
 8001622:	2400      	movs	r4, #0
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <initialise_monitor_handles+0xa4>)
 8001626:	606c      	str	r4, [r5, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	602b      	str	r3, [r5, #0]
 800162c:	f7ff ffb0 	bl	8001590 <_has_ext_stdout_stderr>
 8001630:	42a0      	cmp	r0, r4
 8001632:	d006      	beq.n	8001642 <initialise_monitor_handles+0x9a>
 8001634:	4b07      	ldr	r3, [pc, #28]	; (8001654 <initialise_monitor_handles+0xac>)
 8001636:	60ec      	str	r4, [r5, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	616c      	str	r4, [r5, #20]
 800163c:	60ab      	str	r3, [r5, #8]
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	612b      	str	r3, [r5, #16]
 8001642:	b005      	add	sp, #20
 8001644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	080020d6 	.word	0x080020d6
 800164c:	2000009c 	.word	0x2000009c
 8001650:	200000a4 	.word	0x200000a4
 8001654:	200000a0 	.word	0x200000a0
 8001658:	20000098 	.word	0x20000098

0800165c <_isatty>:
 800165c:	b570      	push	{r4, r5, r6, lr}
 800165e:	f7ff fd79 	bl	8001154 <findslot>
 8001662:	2509      	movs	r5, #9
 8001664:	1e04      	subs	r4, r0, #0
 8001666:	d104      	bne.n	8001672 <_isatty+0x16>
 8001668:	f000 f816 	bl	8001698 <__errno>
 800166c:	6005      	str	r5, [r0, #0]
 800166e:	0020      	movs	r0, r4
 8001670:	bd70      	pop	{r4, r5, r6, pc}
 8001672:	1c28      	adds	r0, r5, #0
 8001674:	1c21      	adds	r1, r4, #0
 8001676:	beab      	bkpt	0x00ab
 8001678:	1c04      	adds	r4, r0, #0
 800167a:	0020      	movs	r0, r4
 800167c:	2c01      	cmp	r4, #1
 800167e:	d0f7      	beq.n	8001670 <_isatty+0x14>
 8001680:	f000 f80a 	bl	8001698 <__errno>
 8001684:	2400      	movs	r4, #0
 8001686:	0006      	movs	r6, r0
 8001688:	2513      	movs	r5, #19
 800168a:	1c28      	adds	r0, r5, #0
 800168c:	1c21      	adds	r1, r4, #0
 800168e:	beab      	bkpt	0x00ab
 8001690:	1c05      	adds	r5, r0, #0
 8001692:	6035      	str	r5, [r6, #0]
 8001694:	e7eb      	b.n	800166e <_isatty+0x12>
	...

08001698 <__errno>:
 8001698:	4b01      	ldr	r3, [pc, #4]	; (80016a0 <__errno+0x8>)
 800169a:	6818      	ldr	r0, [r3, #0]
 800169c:	4770      	bx	lr
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	20000014 	.word	0x20000014

080016a4 <std>:
 80016a4:	2300      	movs	r3, #0
 80016a6:	b510      	push	{r4, lr}
 80016a8:	0004      	movs	r4, r0
 80016aa:	6003      	str	r3, [r0, #0]
 80016ac:	6043      	str	r3, [r0, #4]
 80016ae:	6083      	str	r3, [r0, #8]
 80016b0:	8181      	strh	r1, [r0, #12]
 80016b2:	6643      	str	r3, [r0, #100]	; 0x64
 80016b4:	81c2      	strh	r2, [r0, #14]
 80016b6:	6103      	str	r3, [r0, #16]
 80016b8:	6143      	str	r3, [r0, #20]
 80016ba:	6183      	str	r3, [r0, #24]
 80016bc:	0019      	movs	r1, r3
 80016be:	2208      	movs	r2, #8
 80016c0:	305c      	adds	r0, #92	; 0x5c
 80016c2:	f000 f8e9 	bl	8001898 <memset>
 80016c6:	4b05      	ldr	r3, [pc, #20]	; (80016dc <std+0x38>)
 80016c8:	6224      	str	r4, [r4, #32]
 80016ca:	6263      	str	r3, [r4, #36]	; 0x24
 80016cc:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <std+0x3c>)
 80016ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <std+0x40>)
 80016d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <std+0x44>)
 80016d6:	6323      	str	r3, [r4, #48]	; 0x30
 80016d8:	bd10      	pop	{r4, pc}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	08001a5d 	.word	0x08001a5d
 80016e0:	08001a85 	.word	0x08001a85
 80016e4:	08001abd 	.word	0x08001abd
 80016e8:	08001ae9 	.word	0x08001ae9

080016ec <_cleanup_r>:
 80016ec:	b510      	push	{r4, lr}
 80016ee:	4902      	ldr	r1, [pc, #8]	; (80016f8 <_cleanup_r+0xc>)
 80016f0:	f000 f88c 	bl	800180c <_fwalk_reent>
 80016f4:	bd10      	pop	{r4, pc}
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	08001ded 	.word	0x08001ded

080016fc <__sfmoreglue>:
 80016fc:	b570      	push	{r4, r5, r6, lr}
 80016fe:	2568      	movs	r5, #104	; 0x68
 8001700:	1e4a      	subs	r2, r1, #1
 8001702:	4355      	muls	r5, r2
 8001704:	000e      	movs	r6, r1
 8001706:	0029      	movs	r1, r5
 8001708:	3174      	adds	r1, #116	; 0x74
 800170a:	f000 f8cd 	bl	80018a8 <_malloc_r>
 800170e:	1e04      	subs	r4, r0, #0
 8001710:	d008      	beq.n	8001724 <__sfmoreglue+0x28>
 8001712:	2100      	movs	r1, #0
 8001714:	002a      	movs	r2, r5
 8001716:	6001      	str	r1, [r0, #0]
 8001718:	6046      	str	r6, [r0, #4]
 800171a:	300c      	adds	r0, #12
 800171c:	60a0      	str	r0, [r4, #8]
 800171e:	3268      	adds	r2, #104	; 0x68
 8001720:	f000 f8ba 	bl	8001898 <memset>
 8001724:	0020      	movs	r0, r4
 8001726:	bd70      	pop	{r4, r5, r6, pc}

08001728 <__sinit>:
 8001728:	6983      	ldr	r3, [r0, #24]
 800172a:	b513      	push	{r0, r1, r4, lr}
 800172c:	0004      	movs	r4, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d128      	bne.n	8001784 <__sinit+0x5c>
 8001732:	6483      	str	r3, [r0, #72]	; 0x48
 8001734:	64c3      	str	r3, [r0, #76]	; 0x4c
 8001736:	6503      	str	r3, [r0, #80]	; 0x50
 8001738:	4b13      	ldr	r3, [pc, #76]	; (8001788 <__sinit+0x60>)
 800173a:	4a14      	ldr	r2, [pc, #80]	; (800178c <__sinit+0x64>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6282      	str	r2, [r0, #40]	; 0x28
 8001740:	9301      	str	r3, [sp, #4]
 8001742:	4298      	cmp	r0, r3
 8001744:	d101      	bne.n	800174a <__sinit+0x22>
 8001746:	2301      	movs	r3, #1
 8001748:	6183      	str	r3, [r0, #24]
 800174a:	0020      	movs	r0, r4
 800174c:	f000 f820 	bl	8001790 <__sfp>
 8001750:	6060      	str	r0, [r4, #4]
 8001752:	0020      	movs	r0, r4
 8001754:	f000 f81c 	bl	8001790 <__sfp>
 8001758:	60a0      	str	r0, [r4, #8]
 800175a:	0020      	movs	r0, r4
 800175c:	f000 f818 	bl	8001790 <__sfp>
 8001760:	2200      	movs	r2, #0
 8001762:	60e0      	str	r0, [r4, #12]
 8001764:	2104      	movs	r1, #4
 8001766:	6860      	ldr	r0, [r4, #4]
 8001768:	f7ff ff9c 	bl	80016a4 <std>
 800176c:	2201      	movs	r2, #1
 800176e:	2109      	movs	r1, #9
 8001770:	68a0      	ldr	r0, [r4, #8]
 8001772:	f7ff ff97 	bl	80016a4 <std>
 8001776:	2202      	movs	r2, #2
 8001778:	2112      	movs	r1, #18
 800177a:	68e0      	ldr	r0, [r4, #12]
 800177c:	f7ff ff92 	bl	80016a4 <std>
 8001780:	2301      	movs	r3, #1
 8001782:	61a3      	str	r3, [r4, #24]
 8001784:	bd13      	pop	{r0, r1, r4, pc}
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	0800213c 	.word	0x0800213c
 800178c:	080016ed 	.word	0x080016ed

08001790 <__sfp>:
 8001790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001792:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <__sfp+0x74>)
 8001794:	0007      	movs	r7, r0
 8001796:	681e      	ldr	r6, [r3, #0]
 8001798:	69b3      	ldr	r3, [r6, #24]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d102      	bne.n	80017a4 <__sfp+0x14>
 800179e:	0030      	movs	r0, r6
 80017a0:	f7ff ffc2 	bl	8001728 <__sinit>
 80017a4:	3648      	adds	r6, #72	; 0x48
 80017a6:	68b4      	ldr	r4, [r6, #8]
 80017a8:	6873      	ldr	r3, [r6, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	d504      	bpl.n	80017b8 <__sfp+0x28>
 80017ae:	6833      	ldr	r3, [r6, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d007      	beq.n	80017c4 <__sfp+0x34>
 80017b4:	6836      	ldr	r6, [r6, #0]
 80017b6:	e7f6      	b.n	80017a6 <__sfp+0x16>
 80017b8:	220c      	movs	r2, #12
 80017ba:	5ea5      	ldrsh	r5, [r4, r2]
 80017bc:	2d00      	cmp	r5, #0
 80017be:	d00d      	beq.n	80017dc <__sfp+0x4c>
 80017c0:	3468      	adds	r4, #104	; 0x68
 80017c2:	e7f2      	b.n	80017aa <__sfp+0x1a>
 80017c4:	2104      	movs	r1, #4
 80017c6:	0038      	movs	r0, r7
 80017c8:	f7ff ff98 	bl	80016fc <__sfmoreglue>
 80017cc:	6030      	str	r0, [r6, #0]
 80017ce:	2800      	cmp	r0, #0
 80017d0:	d1f0      	bne.n	80017b4 <__sfp+0x24>
 80017d2:	230c      	movs	r3, #12
 80017d4:	0004      	movs	r4, r0
 80017d6:	603b      	str	r3, [r7, #0]
 80017d8:	0020      	movs	r0, r4
 80017da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017dc:	0020      	movs	r0, r4
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <__sfp+0x78>)
 80017e0:	6665      	str	r5, [r4, #100]	; 0x64
 80017e2:	6025      	str	r5, [r4, #0]
 80017e4:	6065      	str	r5, [r4, #4]
 80017e6:	60a5      	str	r5, [r4, #8]
 80017e8:	60e3      	str	r3, [r4, #12]
 80017ea:	6125      	str	r5, [r4, #16]
 80017ec:	6165      	str	r5, [r4, #20]
 80017ee:	61a5      	str	r5, [r4, #24]
 80017f0:	2208      	movs	r2, #8
 80017f2:	0029      	movs	r1, r5
 80017f4:	305c      	adds	r0, #92	; 0x5c
 80017f6:	f000 f84f 	bl	8001898 <memset>
 80017fa:	6365      	str	r5, [r4, #52]	; 0x34
 80017fc:	63a5      	str	r5, [r4, #56]	; 0x38
 80017fe:	64a5      	str	r5, [r4, #72]	; 0x48
 8001800:	64e5      	str	r5, [r4, #76]	; 0x4c
 8001802:	e7e9      	b.n	80017d8 <__sfp+0x48>
 8001804:	0800213c 	.word	0x0800213c
 8001808:	ffff0001 	.word	0xffff0001

0800180c <_fwalk_reent>:
 800180c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800180e:	0004      	movs	r4, r0
 8001810:	0007      	movs	r7, r0
 8001812:	2600      	movs	r6, #0
 8001814:	9101      	str	r1, [sp, #4]
 8001816:	3448      	adds	r4, #72	; 0x48
 8001818:	2c00      	cmp	r4, #0
 800181a:	d101      	bne.n	8001820 <_fwalk_reent+0x14>
 800181c:	0030      	movs	r0, r6
 800181e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001820:	6863      	ldr	r3, [r4, #4]
 8001822:	68a5      	ldr	r5, [r4, #8]
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	9b00      	ldr	r3, [sp, #0]
 8001828:	3b01      	subs	r3, #1
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	d501      	bpl.n	8001832 <_fwalk_reent+0x26>
 800182e:	6824      	ldr	r4, [r4, #0]
 8001830:	e7f2      	b.n	8001818 <_fwalk_reent+0xc>
 8001832:	89ab      	ldrh	r3, [r5, #12]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d908      	bls.n	800184a <_fwalk_reent+0x3e>
 8001838:	220e      	movs	r2, #14
 800183a:	5eab      	ldrsh	r3, [r5, r2]
 800183c:	3301      	adds	r3, #1
 800183e:	d004      	beq.n	800184a <_fwalk_reent+0x3e>
 8001840:	0029      	movs	r1, r5
 8001842:	0038      	movs	r0, r7
 8001844:	9b01      	ldr	r3, [sp, #4]
 8001846:	4798      	blx	r3
 8001848:	4306      	orrs	r6, r0
 800184a:	3568      	adds	r5, #104	; 0x68
 800184c:	e7eb      	b.n	8001826 <_fwalk_reent+0x1a>
	...

08001850 <__libc_init_array>:
 8001850:	b570      	push	{r4, r5, r6, lr}
 8001852:	2600      	movs	r6, #0
 8001854:	4d0c      	ldr	r5, [pc, #48]	; (8001888 <__libc_init_array+0x38>)
 8001856:	4c0d      	ldr	r4, [pc, #52]	; (800188c <__libc_init_array+0x3c>)
 8001858:	1b64      	subs	r4, r4, r5
 800185a:	10a4      	asrs	r4, r4, #2
 800185c:	42a6      	cmp	r6, r4
 800185e:	d109      	bne.n	8001874 <__libc_init_array+0x24>
 8001860:	2600      	movs	r6, #0
 8001862:	f000 fbf3 	bl	800204c <_init>
 8001866:	4d0a      	ldr	r5, [pc, #40]	; (8001890 <__libc_init_array+0x40>)
 8001868:	4c0a      	ldr	r4, [pc, #40]	; (8001894 <__libc_init_array+0x44>)
 800186a:	1b64      	subs	r4, r4, r5
 800186c:	10a4      	asrs	r4, r4, #2
 800186e:	42a6      	cmp	r6, r4
 8001870:	d105      	bne.n	800187e <__libc_init_array+0x2e>
 8001872:	bd70      	pop	{r4, r5, r6, pc}
 8001874:	00b3      	lsls	r3, r6, #2
 8001876:	58eb      	ldr	r3, [r5, r3]
 8001878:	4798      	blx	r3
 800187a:	3601      	adds	r6, #1
 800187c:	e7ee      	b.n	800185c <__libc_init_array+0xc>
 800187e:	00b3      	lsls	r3, r6, #2
 8001880:	58eb      	ldr	r3, [r5, r3]
 8001882:	4798      	blx	r3
 8001884:	3601      	adds	r6, #1
 8001886:	e7f2      	b.n	800186e <__libc_init_array+0x1e>
 8001888:	08002140 	.word	0x08002140
 800188c:	08002140 	.word	0x08002140
 8001890:	08002140 	.word	0x08002140
 8001894:	08002144 	.word	0x08002144

08001898 <memset>:
 8001898:	0003      	movs	r3, r0
 800189a:	1812      	adds	r2, r2, r0
 800189c:	4293      	cmp	r3, r2
 800189e:	d100      	bne.n	80018a2 <memset+0xa>
 80018a0:	4770      	bx	lr
 80018a2:	7019      	strb	r1, [r3, #0]
 80018a4:	3301      	adds	r3, #1
 80018a6:	e7f9      	b.n	800189c <memset+0x4>

080018a8 <_malloc_r>:
 80018a8:	2303      	movs	r3, #3
 80018aa:	b570      	push	{r4, r5, r6, lr}
 80018ac:	1ccd      	adds	r5, r1, #3
 80018ae:	439d      	bics	r5, r3
 80018b0:	3508      	adds	r5, #8
 80018b2:	0006      	movs	r6, r0
 80018b4:	2d0c      	cmp	r5, #12
 80018b6:	d21e      	bcs.n	80018f6 <_malloc_r+0x4e>
 80018b8:	250c      	movs	r5, #12
 80018ba:	42a9      	cmp	r1, r5
 80018bc:	d81d      	bhi.n	80018fa <_malloc_r+0x52>
 80018be:	0030      	movs	r0, r6
 80018c0:	f000 fb40 	bl	8001f44 <__malloc_lock>
 80018c4:	4a25      	ldr	r2, [pc, #148]	; (800195c <_malloc_r+0xb4>)
 80018c6:	6814      	ldr	r4, [r2, #0]
 80018c8:	0021      	movs	r1, r4
 80018ca:	2900      	cmp	r1, #0
 80018cc:	d119      	bne.n	8001902 <_malloc_r+0x5a>
 80018ce:	4c24      	ldr	r4, [pc, #144]	; (8001960 <_malloc_r+0xb8>)
 80018d0:	6823      	ldr	r3, [r4, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d103      	bne.n	80018de <_malloc_r+0x36>
 80018d6:	0030      	movs	r0, r6
 80018d8:	f000 f8ae 	bl	8001a38 <_sbrk_r>
 80018dc:	6020      	str	r0, [r4, #0]
 80018de:	0029      	movs	r1, r5
 80018e0:	0030      	movs	r0, r6
 80018e2:	f000 f8a9 	bl	8001a38 <_sbrk_r>
 80018e6:	1c43      	adds	r3, r0, #1
 80018e8:	d12b      	bne.n	8001942 <_malloc_r+0x9a>
 80018ea:	230c      	movs	r3, #12
 80018ec:	0030      	movs	r0, r6
 80018ee:	6033      	str	r3, [r6, #0]
 80018f0:	f000 fb29 	bl	8001f46 <__malloc_unlock>
 80018f4:	e003      	b.n	80018fe <_malloc_r+0x56>
 80018f6:	2d00      	cmp	r5, #0
 80018f8:	dadf      	bge.n	80018ba <_malloc_r+0x12>
 80018fa:	230c      	movs	r3, #12
 80018fc:	6033      	str	r3, [r6, #0]
 80018fe:	2000      	movs	r0, #0
 8001900:	bd70      	pop	{r4, r5, r6, pc}
 8001902:	680b      	ldr	r3, [r1, #0]
 8001904:	1b5b      	subs	r3, r3, r5
 8001906:	d419      	bmi.n	800193c <_malloc_r+0x94>
 8001908:	2b0b      	cmp	r3, #11
 800190a:	d903      	bls.n	8001914 <_malloc_r+0x6c>
 800190c:	600b      	str	r3, [r1, #0]
 800190e:	18cc      	adds	r4, r1, r3
 8001910:	6025      	str	r5, [r4, #0]
 8001912:	e003      	b.n	800191c <_malloc_r+0x74>
 8001914:	684b      	ldr	r3, [r1, #4]
 8001916:	428c      	cmp	r4, r1
 8001918:	d10d      	bne.n	8001936 <_malloc_r+0x8e>
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	0030      	movs	r0, r6
 800191e:	f000 fb12 	bl	8001f46 <__malloc_unlock>
 8001922:	0020      	movs	r0, r4
 8001924:	2207      	movs	r2, #7
 8001926:	300b      	adds	r0, #11
 8001928:	1d23      	adds	r3, r4, #4
 800192a:	4390      	bics	r0, r2
 800192c:	1ac3      	subs	r3, r0, r3
 800192e:	d0e7      	beq.n	8001900 <_malloc_r+0x58>
 8001930:	425a      	negs	r2, r3
 8001932:	50e2      	str	r2, [r4, r3]
 8001934:	e7e4      	b.n	8001900 <_malloc_r+0x58>
 8001936:	6063      	str	r3, [r4, #4]
 8001938:	000c      	movs	r4, r1
 800193a:	e7ef      	b.n	800191c <_malloc_r+0x74>
 800193c:	000c      	movs	r4, r1
 800193e:	6849      	ldr	r1, [r1, #4]
 8001940:	e7c3      	b.n	80018ca <_malloc_r+0x22>
 8001942:	2303      	movs	r3, #3
 8001944:	1cc4      	adds	r4, r0, #3
 8001946:	439c      	bics	r4, r3
 8001948:	42a0      	cmp	r0, r4
 800194a:	d0e1      	beq.n	8001910 <_malloc_r+0x68>
 800194c:	1a21      	subs	r1, r4, r0
 800194e:	0030      	movs	r0, r6
 8001950:	f000 f872 	bl	8001a38 <_sbrk_r>
 8001954:	1c43      	adds	r3, r0, #1
 8001956:	d1db      	bne.n	8001910 <_malloc_r+0x68>
 8001958:	e7c7      	b.n	80018ea <_malloc_r+0x42>
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	20000144 	.word	0x20000144
 8001960:	20000148 	.word	0x20000148

08001964 <_puts_r>:
 8001964:	b570      	push	{r4, r5, r6, lr}
 8001966:	0005      	movs	r5, r0
 8001968:	000e      	movs	r6, r1
 800196a:	2800      	cmp	r0, #0
 800196c:	d004      	beq.n	8001978 <_puts_r+0x14>
 800196e:	6983      	ldr	r3, [r0, #24]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <_puts_r+0x14>
 8001974:	f7ff fed8 	bl	8001728 <__sinit>
 8001978:	69ab      	ldr	r3, [r5, #24]
 800197a:	68ac      	ldr	r4, [r5, #8]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d102      	bne.n	8001986 <_puts_r+0x22>
 8001980:	0028      	movs	r0, r5
 8001982:	f7ff fed1 	bl	8001728 <__sinit>
 8001986:	4b24      	ldr	r3, [pc, #144]	; (8001a18 <_puts_r+0xb4>)
 8001988:	429c      	cmp	r4, r3
 800198a:	d10f      	bne.n	80019ac <_puts_r+0x48>
 800198c:	686c      	ldr	r4, [r5, #4]
 800198e:	89a3      	ldrh	r3, [r4, #12]
 8001990:	071b      	lsls	r3, r3, #28
 8001992:	d502      	bpl.n	800199a <_puts_r+0x36>
 8001994:	6923      	ldr	r3, [r4, #16]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d11f      	bne.n	80019da <_puts_r+0x76>
 800199a:	0021      	movs	r1, r4
 800199c:	0028      	movs	r0, r5
 800199e:	f000 f913 	bl	8001bc8 <__swsetup_r>
 80019a2:	2800      	cmp	r0, #0
 80019a4:	d019      	beq.n	80019da <_puts_r+0x76>
 80019a6:	2001      	movs	r0, #1
 80019a8:	4240      	negs	r0, r0
 80019aa:	bd70      	pop	{r4, r5, r6, pc}
 80019ac:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <_puts_r+0xb8>)
 80019ae:	429c      	cmp	r4, r3
 80019b0:	d101      	bne.n	80019b6 <_puts_r+0x52>
 80019b2:	68ac      	ldr	r4, [r5, #8]
 80019b4:	e7eb      	b.n	800198e <_puts_r+0x2a>
 80019b6:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <_puts_r+0xbc>)
 80019b8:	429c      	cmp	r4, r3
 80019ba:	d1e8      	bne.n	800198e <_puts_r+0x2a>
 80019bc:	68ec      	ldr	r4, [r5, #12]
 80019be:	e7e6      	b.n	800198e <_puts_r+0x2a>
 80019c0:	3601      	adds	r6, #1
 80019c2:	60a3      	str	r3, [r4, #8]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	da04      	bge.n	80019d2 <_puts_r+0x6e>
 80019c8:	69a2      	ldr	r2, [r4, #24]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	dc16      	bgt.n	80019fc <_puts_r+0x98>
 80019ce:	290a      	cmp	r1, #10
 80019d0:	d014      	beq.n	80019fc <_puts_r+0x98>
 80019d2:	6823      	ldr	r3, [r4, #0]
 80019d4:	1c5a      	adds	r2, r3, #1
 80019d6:	6022      	str	r2, [r4, #0]
 80019d8:	7019      	strb	r1, [r3, #0]
 80019da:	68a3      	ldr	r3, [r4, #8]
 80019dc:	7831      	ldrb	r1, [r6, #0]
 80019de:	3b01      	subs	r3, #1
 80019e0:	2900      	cmp	r1, #0
 80019e2:	d1ed      	bne.n	80019c0 <_puts_r+0x5c>
 80019e4:	60a3      	str	r3, [r4, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	da0f      	bge.n	8001a0a <_puts_r+0xa6>
 80019ea:	0022      	movs	r2, r4
 80019ec:	310a      	adds	r1, #10
 80019ee:	0028      	movs	r0, r5
 80019f0:	f000 f880 	bl	8001af4 <__swbuf_r>
 80019f4:	1c43      	adds	r3, r0, #1
 80019f6:	d0d6      	beq.n	80019a6 <_puts_r+0x42>
 80019f8:	200a      	movs	r0, #10
 80019fa:	e7d6      	b.n	80019aa <_puts_r+0x46>
 80019fc:	0022      	movs	r2, r4
 80019fe:	0028      	movs	r0, r5
 8001a00:	f000 f878 	bl	8001af4 <__swbuf_r>
 8001a04:	1c43      	adds	r3, r0, #1
 8001a06:	d1e8      	bne.n	80019da <_puts_r+0x76>
 8001a08:	e7cd      	b.n	80019a6 <_puts_r+0x42>
 8001a0a:	200a      	movs	r0, #10
 8001a0c:	6823      	ldr	r3, [r4, #0]
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	6022      	str	r2, [r4, #0]
 8001a12:	7018      	strb	r0, [r3, #0]
 8001a14:	e7c9      	b.n	80019aa <_puts_r+0x46>
 8001a16:	46c0      	nop			; (mov r8, r8)
 8001a18:	080020fc 	.word	0x080020fc
 8001a1c:	0800211c 	.word	0x0800211c
 8001a20:	080020dc 	.word	0x080020dc

08001a24 <puts>:
 8001a24:	b510      	push	{r4, lr}
 8001a26:	4b03      	ldr	r3, [pc, #12]	; (8001a34 <puts+0x10>)
 8001a28:	0001      	movs	r1, r0
 8001a2a:	6818      	ldr	r0, [r3, #0]
 8001a2c:	f7ff ff9a 	bl	8001964 <_puts_r>
 8001a30:	bd10      	pop	{r4, pc}
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	20000014 	.word	0x20000014

08001a38 <_sbrk_r>:
 8001a38:	2300      	movs	r3, #0
 8001a3a:	b570      	push	{r4, r5, r6, lr}
 8001a3c:	4c06      	ldr	r4, [pc, #24]	; (8001a58 <_sbrk_r+0x20>)
 8001a3e:	0005      	movs	r5, r0
 8001a40:	0008      	movs	r0, r1
 8001a42:	6023      	str	r3, [r4, #0]
 8001a44:	f7fe fce0 	bl	8000408 <_sbrk>
 8001a48:	1c43      	adds	r3, r0, #1
 8001a4a:	d103      	bne.n	8001a54 <_sbrk_r+0x1c>
 8001a4c:	6823      	ldr	r3, [r4, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d000      	beq.n	8001a54 <_sbrk_r+0x1c>
 8001a52:	602b      	str	r3, [r5, #0]
 8001a54:	bd70      	pop	{r4, r5, r6, pc}
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	20000150 	.word	0x20000150

08001a5c <__sread>:
 8001a5c:	b570      	push	{r4, r5, r6, lr}
 8001a5e:	000c      	movs	r4, r1
 8001a60:	250e      	movs	r5, #14
 8001a62:	5f49      	ldrsh	r1, [r1, r5]
 8001a64:	f000 faba 	bl	8001fdc <_read_r>
 8001a68:	2800      	cmp	r0, #0
 8001a6a:	db03      	blt.n	8001a74 <__sread+0x18>
 8001a6c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a6e:	181b      	adds	r3, r3, r0
 8001a70:	6563      	str	r3, [r4, #84]	; 0x54
 8001a72:	bd70      	pop	{r4, r5, r6, pc}
 8001a74:	89a3      	ldrh	r3, [r4, #12]
 8001a76:	4a02      	ldr	r2, [pc, #8]	; (8001a80 <__sread+0x24>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	81a3      	strh	r3, [r4, #12]
 8001a7c:	e7f9      	b.n	8001a72 <__sread+0x16>
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	ffffefff 	.word	0xffffefff

08001a84 <__swrite>:
 8001a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a86:	001f      	movs	r7, r3
 8001a88:	898b      	ldrh	r3, [r1, #12]
 8001a8a:	0005      	movs	r5, r0
 8001a8c:	000c      	movs	r4, r1
 8001a8e:	0016      	movs	r6, r2
 8001a90:	05db      	lsls	r3, r3, #23
 8001a92:	d505      	bpl.n	8001aa0 <__swrite+0x1c>
 8001a94:	230e      	movs	r3, #14
 8001a96:	5ec9      	ldrsh	r1, [r1, r3]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	f000 f9d2 	bl	8001e44 <_lseek_r>
 8001aa0:	89a3      	ldrh	r3, [r4, #12]
 8001aa2:	4a05      	ldr	r2, [pc, #20]	; (8001ab8 <__swrite+0x34>)
 8001aa4:	0028      	movs	r0, r5
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	81a3      	strh	r3, [r4, #12]
 8001aaa:	0032      	movs	r2, r6
 8001aac:	230e      	movs	r3, #14
 8001aae:	5ee1      	ldrsh	r1, [r4, r3]
 8001ab0:	003b      	movs	r3, r7
 8001ab2:	f000 f875 	bl	8001ba0 <_write_r>
 8001ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ab8:	ffffefff 	.word	0xffffefff

08001abc <__sseek>:
 8001abc:	b570      	push	{r4, r5, r6, lr}
 8001abe:	000c      	movs	r4, r1
 8001ac0:	250e      	movs	r5, #14
 8001ac2:	5f49      	ldrsh	r1, [r1, r5]
 8001ac4:	f000 f9be 	bl	8001e44 <_lseek_r>
 8001ac8:	89a3      	ldrh	r3, [r4, #12]
 8001aca:	1c42      	adds	r2, r0, #1
 8001acc:	d103      	bne.n	8001ad6 <__sseek+0x1a>
 8001ace:	4a05      	ldr	r2, [pc, #20]	; (8001ae4 <__sseek+0x28>)
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	81a3      	strh	r3, [r4, #12]
 8001ad4:	bd70      	pop	{r4, r5, r6, pc}
 8001ad6:	2280      	movs	r2, #128	; 0x80
 8001ad8:	0152      	lsls	r2, r2, #5
 8001ada:	4313      	orrs	r3, r2
 8001adc:	81a3      	strh	r3, [r4, #12]
 8001ade:	6560      	str	r0, [r4, #84]	; 0x54
 8001ae0:	e7f8      	b.n	8001ad4 <__sseek+0x18>
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	ffffefff 	.word	0xffffefff

08001ae8 <__sclose>:
 8001ae8:	b510      	push	{r4, lr}
 8001aea:	230e      	movs	r3, #14
 8001aec:	5ec9      	ldrsh	r1, [r1, r3]
 8001aee:	f000 f8e1 	bl	8001cb4 <_close_r>
 8001af2:	bd10      	pop	{r4, pc}

08001af4 <__swbuf_r>:
 8001af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001af6:	0005      	movs	r5, r0
 8001af8:	000e      	movs	r6, r1
 8001afa:	0014      	movs	r4, r2
 8001afc:	2800      	cmp	r0, #0
 8001afe:	d004      	beq.n	8001b0a <__swbuf_r+0x16>
 8001b00:	6983      	ldr	r3, [r0, #24]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <__swbuf_r+0x16>
 8001b06:	f7ff fe0f 	bl	8001728 <__sinit>
 8001b0a:	4b22      	ldr	r3, [pc, #136]	; (8001b94 <__swbuf_r+0xa0>)
 8001b0c:	429c      	cmp	r4, r3
 8001b0e:	d12d      	bne.n	8001b6c <__swbuf_r+0x78>
 8001b10:	686c      	ldr	r4, [r5, #4]
 8001b12:	69a3      	ldr	r3, [r4, #24]
 8001b14:	60a3      	str	r3, [r4, #8]
 8001b16:	89a3      	ldrh	r3, [r4, #12]
 8001b18:	071b      	lsls	r3, r3, #28
 8001b1a:	d531      	bpl.n	8001b80 <__swbuf_r+0x8c>
 8001b1c:	6923      	ldr	r3, [r4, #16]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d02e      	beq.n	8001b80 <__swbuf_r+0x8c>
 8001b22:	6823      	ldr	r3, [r4, #0]
 8001b24:	6922      	ldr	r2, [r4, #16]
 8001b26:	b2f7      	uxtb	r7, r6
 8001b28:	1a98      	subs	r0, r3, r2
 8001b2a:	6963      	ldr	r3, [r4, #20]
 8001b2c:	b2f6      	uxtb	r6, r6
 8001b2e:	4283      	cmp	r3, r0
 8001b30:	dc05      	bgt.n	8001b3e <__swbuf_r+0x4a>
 8001b32:	0021      	movs	r1, r4
 8001b34:	0028      	movs	r0, r5
 8001b36:	f000 f959 	bl	8001dec <_fflush_r>
 8001b3a:	2800      	cmp	r0, #0
 8001b3c:	d126      	bne.n	8001b8c <__swbuf_r+0x98>
 8001b3e:	68a3      	ldr	r3, [r4, #8]
 8001b40:	3001      	adds	r0, #1
 8001b42:	3b01      	subs	r3, #1
 8001b44:	60a3      	str	r3, [r4, #8]
 8001b46:	6823      	ldr	r3, [r4, #0]
 8001b48:	1c5a      	adds	r2, r3, #1
 8001b4a:	6022      	str	r2, [r4, #0]
 8001b4c:	701f      	strb	r7, [r3, #0]
 8001b4e:	6963      	ldr	r3, [r4, #20]
 8001b50:	4283      	cmp	r3, r0
 8001b52:	d004      	beq.n	8001b5e <__swbuf_r+0x6a>
 8001b54:	89a3      	ldrh	r3, [r4, #12]
 8001b56:	07db      	lsls	r3, r3, #31
 8001b58:	d51a      	bpl.n	8001b90 <__swbuf_r+0x9c>
 8001b5a:	2e0a      	cmp	r6, #10
 8001b5c:	d118      	bne.n	8001b90 <__swbuf_r+0x9c>
 8001b5e:	0021      	movs	r1, r4
 8001b60:	0028      	movs	r0, r5
 8001b62:	f000 f943 	bl	8001dec <_fflush_r>
 8001b66:	2800      	cmp	r0, #0
 8001b68:	d012      	beq.n	8001b90 <__swbuf_r+0x9c>
 8001b6a:	e00f      	b.n	8001b8c <__swbuf_r+0x98>
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <__swbuf_r+0xa4>)
 8001b6e:	429c      	cmp	r4, r3
 8001b70:	d101      	bne.n	8001b76 <__swbuf_r+0x82>
 8001b72:	68ac      	ldr	r4, [r5, #8]
 8001b74:	e7cd      	b.n	8001b12 <__swbuf_r+0x1e>
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <__swbuf_r+0xa8>)
 8001b78:	429c      	cmp	r4, r3
 8001b7a:	d1ca      	bne.n	8001b12 <__swbuf_r+0x1e>
 8001b7c:	68ec      	ldr	r4, [r5, #12]
 8001b7e:	e7c8      	b.n	8001b12 <__swbuf_r+0x1e>
 8001b80:	0021      	movs	r1, r4
 8001b82:	0028      	movs	r0, r5
 8001b84:	f000 f820 	bl	8001bc8 <__swsetup_r>
 8001b88:	2800      	cmp	r0, #0
 8001b8a:	d0ca      	beq.n	8001b22 <__swbuf_r+0x2e>
 8001b8c:	2601      	movs	r6, #1
 8001b8e:	4276      	negs	r6, r6
 8001b90:	0030      	movs	r0, r6
 8001b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b94:	080020fc 	.word	0x080020fc
 8001b98:	0800211c 	.word	0x0800211c
 8001b9c:	080020dc 	.word	0x080020dc

08001ba0 <_write_r>:
 8001ba0:	b570      	push	{r4, r5, r6, lr}
 8001ba2:	0005      	movs	r5, r0
 8001ba4:	0008      	movs	r0, r1
 8001ba6:	0011      	movs	r1, r2
 8001ba8:	2200      	movs	r2, #0
 8001baa:	4c06      	ldr	r4, [pc, #24]	; (8001bc4 <_write_r+0x24>)
 8001bac:	6022      	str	r2, [r4, #0]
 8001bae:	001a      	movs	r2, r3
 8001bb0:	f7ff fb81 	bl	80012b6 <_write>
 8001bb4:	1c43      	adds	r3, r0, #1
 8001bb6:	d103      	bne.n	8001bc0 <_write_r+0x20>
 8001bb8:	6823      	ldr	r3, [r4, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d000      	beq.n	8001bc0 <_write_r+0x20>
 8001bbe:	602b      	str	r3, [r5, #0]
 8001bc0:	bd70      	pop	{r4, r5, r6, pc}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	20000150 	.word	0x20000150

08001bc8 <__swsetup_r>:
 8001bc8:	4b36      	ldr	r3, [pc, #216]	; (8001ca4 <__swsetup_r+0xdc>)
 8001bca:	b570      	push	{r4, r5, r6, lr}
 8001bcc:	681d      	ldr	r5, [r3, #0]
 8001bce:	0006      	movs	r6, r0
 8001bd0:	000c      	movs	r4, r1
 8001bd2:	2d00      	cmp	r5, #0
 8001bd4:	d005      	beq.n	8001be2 <__swsetup_r+0x1a>
 8001bd6:	69ab      	ldr	r3, [r5, #24]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d102      	bne.n	8001be2 <__swsetup_r+0x1a>
 8001bdc:	0028      	movs	r0, r5
 8001bde:	f7ff fda3 	bl	8001728 <__sinit>
 8001be2:	4b31      	ldr	r3, [pc, #196]	; (8001ca8 <__swsetup_r+0xe0>)
 8001be4:	429c      	cmp	r4, r3
 8001be6:	d10f      	bne.n	8001c08 <__swsetup_r+0x40>
 8001be8:	686c      	ldr	r4, [r5, #4]
 8001bea:	230c      	movs	r3, #12
 8001bec:	5ee2      	ldrsh	r2, [r4, r3]
 8001bee:	b293      	uxth	r3, r2
 8001bf0:	0719      	lsls	r1, r3, #28
 8001bf2:	d42d      	bmi.n	8001c50 <__swsetup_r+0x88>
 8001bf4:	06d9      	lsls	r1, r3, #27
 8001bf6:	d411      	bmi.n	8001c1c <__swsetup_r+0x54>
 8001bf8:	2309      	movs	r3, #9
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	6033      	str	r3, [r6, #0]
 8001bfe:	3337      	adds	r3, #55	; 0x37
 8001c00:	4313      	orrs	r3, r2
 8001c02:	81a3      	strh	r3, [r4, #12]
 8001c04:	4240      	negs	r0, r0
 8001c06:	bd70      	pop	{r4, r5, r6, pc}
 8001c08:	4b28      	ldr	r3, [pc, #160]	; (8001cac <__swsetup_r+0xe4>)
 8001c0a:	429c      	cmp	r4, r3
 8001c0c:	d101      	bne.n	8001c12 <__swsetup_r+0x4a>
 8001c0e:	68ac      	ldr	r4, [r5, #8]
 8001c10:	e7eb      	b.n	8001bea <__swsetup_r+0x22>
 8001c12:	4b27      	ldr	r3, [pc, #156]	; (8001cb0 <__swsetup_r+0xe8>)
 8001c14:	429c      	cmp	r4, r3
 8001c16:	d1e8      	bne.n	8001bea <__swsetup_r+0x22>
 8001c18:	68ec      	ldr	r4, [r5, #12]
 8001c1a:	e7e6      	b.n	8001bea <__swsetup_r+0x22>
 8001c1c:	075b      	lsls	r3, r3, #29
 8001c1e:	d513      	bpl.n	8001c48 <__swsetup_r+0x80>
 8001c20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c22:	2900      	cmp	r1, #0
 8001c24:	d008      	beq.n	8001c38 <__swsetup_r+0x70>
 8001c26:	0023      	movs	r3, r4
 8001c28:	3344      	adds	r3, #68	; 0x44
 8001c2a:	4299      	cmp	r1, r3
 8001c2c:	d002      	beq.n	8001c34 <__swsetup_r+0x6c>
 8001c2e:	0030      	movs	r0, r6
 8001c30:	f000 f98a 	bl	8001f48 <_free_r>
 8001c34:	2300      	movs	r3, #0
 8001c36:	6363      	str	r3, [r4, #52]	; 0x34
 8001c38:	2224      	movs	r2, #36	; 0x24
 8001c3a:	89a3      	ldrh	r3, [r4, #12]
 8001c3c:	4393      	bics	r3, r2
 8001c3e:	81a3      	strh	r3, [r4, #12]
 8001c40:	2300      	movs	r3, #0
 8001c42:	6063      	str	r3, [r4, #4]
 8001c44:	6923      	ldr	r3, [r4, #16]
 8001c46:	6023      	str	r3, [r4, #0]
 8001c48:	2308      	movs	r3, #8
 8001c4a:	89a2      	ldrh	r2, [r4, #12]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	81a3      	strh	r3, [r4, #12]
 8001c50:	6923      	ldr	r3, [r4, #16]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10b      	bne.n	8001c6e <__swsetup_r+0xa6>
 8001c56:	21a0      	movs	r1, #160	; 0xa0
 8001c58:	2280      	movs	r2, #128	; 0x80
 8001c5a:	89a3      	ldrh	r3, [r4, #12]
 8001c5c:	0089      	lsls	r1, r1, #2
 8001c5e:	0092      	lsls	r2, r2, #2
 8001c60:	400b      	ands	r3, r1
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d003      	beq.n	8001c6e <__swsetup_r+0xa6>
 8001c66:	0021      	movs	r1, r4
 8001c68:	0030      	movs	r0, r6
 8001c6a:	f000 f927 	bl	8001ebc <__smakebuf_r>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	89a2      	ldrh	r2, [r4, #12]
 8001c72:	4013      	ands	r3, r2
 8001c74:	d011      	beq.n	8001c9a <__swsetup_r+0xd2>
 8001c76:	2300      	movs	r3, #0
 8001c78:	60a3      	str	r3, [r4, #8]
 8001c7a:	6963      	ldr	r3, [r4, #20]
 8001c7c:	425b      	negs	r3, r3
 8001c7e:	61a3      	str	r3, [r4, #24]
 8001c80:	2000      	movs	r0, #0
 8001c82:	6923      	ldr	r3, [r4, #16]
 8001c84:	4283      	cmp	r3, r0
 8001c86:	d1be      	bne.n	8001c06 <__swsetup_r+0x3e>
 8001c88:	230c      	movs	r3, #12
 8001c8a:	5ee2      	ldrsh	r2, [r4, r3]
 8001c8c:	0613      	lsls	r3, r2, #24
 8001c8e:	d5ba      	bpl.n	8001c06 <__swsetup_r+0x3e>
 8001c90:	2340      	movs	r3, #64	; 0x40
 8001c92:	4313      	orrs	r3, r2
 8001c94:	81a3      	strh	r3, [r4, #12]
 8001c96:	3801      	subs	r0, #1
 8001c98:	e7b5      	b.n	8001c06 <__swsetup_r+0x3e>
 8001c9a:	0792      	lsls	r2, r2, #30
 8001c9c:	d400      	bmi.n	8001ca0 <__swsetup_r+0xd8>
 8001c9e:	6963      	ldr	r3, [r4, #20]
 8001ca0:	60a3      	str	r3, [r4, #8]
 8001ca2:	e7ed      	b.n	8001c80 <__swsetup_r+0xb8>
 8001ca4:	20000014 	.word	0x20000014
 8001ca8:	080020fc 	.word	0x080020fc
 8001cac:	0800211c 	.word	0x0800211c
 8001cb0:	080020dc 	.word	0x080020dc

08001cb4 <_close_r>:
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	b570      	push	{r4, r5, r6, lr}
 8001cb8:	4c06      	ldr	r4, [pc, #24]	; (8001cd4 <_close_r+0x20>)
 8001cba:	0005      	movs	r5, r0
 8001cbc:	0008      	movs	r0, r1
 8001cbe:	6023      	str	r3, [r4, #0]
 8001cc0:	f7ff fb24 	bl	800130c <_close>
 8001cc4:	1c43      	adds	r3, r0, #1
 8001cc6:	d103      	bne.n	8001cd0 <_close_r+0x1c>
 8001cc8:	6823      	ldr	r3, [r4, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d000      	beq.n	8001cd0 <_close_r+0x1c>
 8001cce:	602b      	str	r3, [r5, #0]
 8001cd0:	bd70      	pop	{r4, r5, r6, pc}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	20000150 	.word	0x20000150

08001cd8 <__sflush_r>:
 8001cd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001cda:	898a      	ldrh	r2, [r1, #12]
 8001cdc:	0005      	movs	r5, r0
 8001cde:	000c      	movs	r4, r1
 8001ce0:	0713      	lsls	r3, r2, #28
 8001ce2:	d460      	bmi.n	8001da6 <__sflush_r+0xce>
 8001ce4:	684b      	ldr	r3, [r1, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	dc04      	bgt.n	8001cf4 <__sflush_r+0x1c>
 8001cea:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	dc01      	bgt.n	8001cf4 <__sflush_r+0x1c>
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001cf4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001cf6:	2f00      	cmp	r7, #0
 8001cf8:	d0fa      	beq.n	8001cf0 <__sflush_r+0x18>
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	682e      	ldr	r6, [r5, #0]
 8001cfe:	602b      	str	r3, [r5, #0]
 8001d00:	2380      	movs	r3, #128	; 0x80
 8001d02:	015b      	lsls	r3, r3, #5
 8001d04:	6a21      	ldr	r1, [r4, #32]
 8001d06:	401a      	ands	r2, r3
 8001d08:	d034      	beq.n	8001d74 <__sflush_r+0x9c>
 8001d0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001d0c:	89a3      	ldrh	r3, [r4, #12]
 8001d0e:	075b      	lsls	r3, r3, #29
 8001d10:	d506      	bpl.n	8001d20 <__sflush_r+0x48>
 8001d12:	6863      	ldr	r3, [r4, #4]
 8001d14:	1ac0      	subs	r0, r0, r3
 8001d16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <__sflush_r+0x48>
 8001d1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d1e:	1ac0      	subs	r0, r0, r3
 8001d20:	0002      	movs	r2, r0
 8001d22:	6a21      	ldr	r1, [r4, #32]
 8001d24:	2300      	movs	r3, #0
 8001d26:	0028      	movs	r0, r5
 8001d28:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001d2a:	47b8      	blx	r7
 8001d2c:	89a1      	ldrh	r1, [r4, #12]
 8001d2e:	1c43      	adds	r3, r0, #1
 8001d30:	d106      	bne.n	8001d40 <__sflush_r+0x68>
 8001d32:	682b      	ldr	r3, [r5, #0]
 8001d34:	2b1d      	cmp	r3, #29
 8001d36:	d830      	bhi.n	8001d9a <__sflush_r+0xc2>
 8001d38:	4a2b      	ldr	r2, [pc, #172]	; (8001de8 <__sflush_r+0x110>)
 8001d3a:	40da      	lsrs	r2, r3
 8001d3c:	07d3      	lsls	r3, r2, #31
 8001d3e:	d52c      	bpl.n	8001d9a <__sflush_r+0xc2>
 8001d40:	2300      	movs	r3, #0
 8001d42:	6063      	str	r3, [r4, #4]
 8001d44:	6923      	ldr	r3, [r4, #16]
 8001d46:	6023      	str	r3, [r4, #0]
 8001d48:	04cb      	lsls	r3, r1, #19
 8001d4a:	d505      	bpl.n	8001d58 <__sflush_r+0x80>
 8001d4c:	1c43      	adds	r3, r0, #1
 8001d4e:	d102      	bne.n	8001d56 <__sflush_r+0x7e>
 8001d50:	682b      	ldr	r3, [r5, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d100      	bne.n	8001d58 <__sflush_r+0x80>
 8001d56:	6560      	str	r0, [r4, #84]	; 0x54
 8001d58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d5a:	602e      	str	r6, [r5, #0]
 8001d5c:	2900      	cmp	r1, #0
 8001d5e:	d0c7      	beq.n	8001cf0 <__sflush_r+0x18>
 8001d60:	0023      	movs	r3, r4
 8001d62:	3344      	adds	r3, #68	; 0x44
 8001d64:	4299      	cmp	r1, r3
 8001d66:	d002      	beq.n	8001d6e <__sflush_r+0x96>
 8001d68:	0028      	movs	r0, r5
 8001d6a:	f000 f8ed 	bl	8001f48 <_free_r>
 8001d6e:	2000      	movs	r0, #0
 8001d70:	6360      	str	r0, [r4, #52]	; 0x34
 8001d72:	e7be      	b.n	8001cf2 <__sflush_r+0x1a>
 8001d74:	2301      	movs	r3, #1
 8001d76:	0028      	movs	r0, r5
 8001d78:	47b8      	blx	r7
 8001d7a:	1c43      	adds	r3, r0, #1
 8001d7c:	d1c6      	bne.n	8001d0c <__sflush_r+0x34>
 8001d7e:	682b      	ldr	r3, [r5, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0c3      	beq.n	8001d0c <__sflush_r+0x34>
 8001d84:	2b1d      	cmp	r3, #29
 8001d86:	d001      	beq.n	8001d8c <__sflush_r+0xb4>
 8001d88:	2b16      	cmp	r3, #22
 8001d8a:	d101      	bne.n	8001d90 <__sflush_r+0xb8>
 8001d8c:	602e      	str	r6, [r5, #0]
 8001d8e:	e7af      	b.n	8001cf0 <__sflush_r+0x18>
 8001d90:	2340      	movs	r3, #64	; 0x40
 8001d92:	89a2      	ldrh	r2, [r4, #12]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	81a3      	strh	r3, [r4, #12]
 8001d98:	e7ab      	b.n	8001cf2 <__sflush_r+0x1a>
 8001d9a:	2340      	movs	r3, #64	; 0x40
 8001d9c:	430b      	orrs	r3, r1
 8001d9e:	2001      	movs	r0, #1
 8001da0:	81a3      	strh	r3, [r4, #12]
 8001da2:	4240      	negs	r0, r0
 8001da4:	e7a5      	b.n	8001cf2 <__sflush_r+0x1a>
 8001da6:	690f      	ldr	r7, [r1, #16]
 8001da8:	2f00      	cmp	r7, #0
 8001daa:	d0a1      	beq.n	8001cf0 <__sflush_r+0x18>
 8001dac:	680b      	ldr	r3, [r1, #0]
 8001dae:	600f      	str	r7, [r1, #0]
 8001db0:	1bdb      	subs	r3, r3, r7
 8001db2:	9301      	str	r3, [sp, #4]
 8001db4:	2300      	movs	r3, #0
 8001db6:	0792      	lsls	r2, r2, #30
 8001db8:	d100      	bne.n	8001dbc <__sflush_r+0xe4>
 8001dba:	694b      	ldr	r3, [r1, #20]
 8001dbc:	60a3      	str	r3, [r4, #8]
 8001dbe:	9b01      	ldr	r3, [sp, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	dc00      	bgt.n	8001dc6 <__sflush_r+0xee>
 8001dc4:	e794      	b.n	8001cf0 <__sflush_r+0x18>
 8001dc6:	9b01      	ldr	r3, [sp, #4]
 8001dc8:	003a      	movs	r2, r7
 8001dca:	6a21      	ldr	r1, [r4, #32]
 8001dcc:	0028      	movs	r0, r5
 8001dce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001dd0:	47b0      	blx	r6
 8001dd2:	2800      	cmp	r0, #0
 8001dd4:	dc03      	bgt.n	8001dde <__sflush_r+0x106>
 8001dd6:	2340      	movs	r3, #64	; 0x40
 8001dd8:	89a2      	ldrh	r2, [r4, #12]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	e7df      	b.n	8001d9e <__sflush_r+0xc6>
 8001dde:	9b01      	ldr	r3, [sp, #4]
 8001de0:	183f      	adds	r7, r7, r0
 8001de2:	1a1b      	subs	r3, r3, r0
 8001de4:	9301      	str	r3, [sp, #4]
 8001de6:	e7ea      	b.n	8001dbe <__sflush_r+0xe6>
 8001de8:	20400001 	.word	0x20400001

08001dec <_fflush_r>:
 8001dec:	690b      	ldr	r3, [r1, #16]
 8001dee:	b570      	push	{r4, r5, r6, lr}
 8001df0:	0005      	movs	r5, r0
 8001df2:	000c      	movs	r4, r1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <_fflush_r+0x10>
 8001df8:	2000      	movs	r0, #0
 8001dfa:	bd70      	pop	{r4, r5, r6, pc}
 8001dfc:	2800      	cmp	r0, #0
 8001dfe:	d004      	beq.n	8001e0a <_fflush_r+0x1e>
 8001e00:	6983      	ldr	r3, [r0, #24]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <_fflush_r+0x1e>
 8001e06:	f7ff fc8f 	bl	8001728 <__sinit>
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <_fflush_r+0x4c>)
 8001e0c:	429c      	cmp	r4, r3
 8001e0e:	d109      	bne.n	8001e24 <_fflush_r+0x38>
 8001e10:	686c      	ldr	r4, [r5, #4]
 8001e12:	220c      	movs	r2, #12
 8001e14:	5ea3      	ldrsh	r3, [r4, r2]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0ee      	beq.n	8001df8 <_fflush_r+0xc>
 8001e1a:	0021      	movs	r1, r4
 8001e1c:	0028      	movs	r0, r5
 8001e1e:	f7ff ff5b 	bl	8001cd8 <__sflush_r>
 8001e22:	e7ea      	b.n	8001dfa <_fflush_r+0xe>
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <_fflush_r+0x50>)
 8001e26:	429c      	cmp	r4, r3
 8001e28:	d101      	bne.n	8001e2e <_fflush_r+0x42>
 8001e2a:	68ac      	ldr	r4, [r5, #8]
 8001e2c:	e7f1      	b.n	8001e12 <_fflush_r+0x26>
 8001e2e:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <_fflush_r+0x54>)
 8001e30:	429c      	cmp	r4, r3
 8001e32:	d1ee      	bne.n	8001e12 <_fflush_r+0x26>
 8001e34:	68ec      	ldr	r4, [r5, #12]
 8001e36:	e7ec      	b.n	8001e12 <_fflush_r+0x26>
 8001e38:	080020fc 	.word	0x080020fc
 8001e3c:	0800211c 	.word	0x0800211c
 8001e40:	080020dc 	.word	0x080020dc

08001e44 <_lseek_r>:
 8001e44:	b570      	push	{r4, r5, r6, lr}
 8001e46:	0005      	movs	r5, r0
 8001e48:	0008      	movs	r0, r1
 8001e4a:	0011      	movs	r1, r2
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	4c06      	ldr	r4, [pc, #24]	; (8001e68 <_lseek_r+0x24>)
 8001e50:	6022      	str	r2, [r4, #0]
 8001e52:	001a      	movs	r2, r3
 8001e54:	f7ff fa1b 	bl	800128e <_lseek>
 8001e58:	1c43      	adds	r3, r0, #1
 8001e5a:	d103      	bne.n	8001e64 <_lseek_r+0x20>
 8001e5c:	6823      	ldr	r3, [r4, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d000      	beq.n	8001e64 <_lseek_r+0x20>
 8001e62:	602b      	str	r3, [r5, #0]
 8001e64:	bd70      	pop	{r4, r5, r6, pc}
 8001e66:	46c0      	nop			; (mov r8, r8)
 8001e68:	20000150 	.word	0x20000150

08001e6c <__swhatbuf_r>:
 8001e6c:	b570      	push	{r4, r5, r6, lr}
 8001e6e:	000e      	movs	r6, r1
 8001e70:	001d      	movs	r5, r3
 8001e72:	230e      	movs	r3, #14
 8001e74:	5ec9      	ldrsh	r1, [r1, r3]
 8001e76:	b096      	sub	sp, #88	; 0x58
 8001e78:	0014      	movs	r4, r2
 8001e7a:	2900      	cmp	r1, #0
 8001e7c:	da07      	bge.n	8001e8e <__swhatbuf_r+0x22>
 8001e7e:	2300      	movs	r3, #0
 8001e80:	602b      	str	r3, [r5, #0]
 8001e82:	89b3      	ldrh	r3, [r6, #12]
 8001e84:	061b      	lsls	r3, r3, #24
 8001e86:	d411      	bmi.n	8001eac <__swhatbuf_r+0x40>
 8001e88:	2380      	movs	r3, #128	; 0x80
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	e00f      	b.n	8001eae <__swhatbuf_r+0x42>
 8001e8e:	466a      	mov	r2, sp
 8001e90:	f000 f8b8 	bl	8002004 <_fstat_r>
 8001e94:	2800      	cmp	r0, #0
 8001e96:	dbf2      	blt.n	8001e7e <__swhatbuf_r+0x12>
 8001e98:	22f0      	movs	r2, #240	; 0xf0
 8001e9a:	9b01      	ldr	r3, [sp, #4]
 8001e9c:	0212      	lsls	r2, r2, #8
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	4a05      	ldr	r2, [pc, #20]	; (8001eb8 <__swhatbuf_r+0x4c>)
 8001ea2:	189b      	adds	r3, r3, r2
 8001ea4:	425a      	negs	r2, r3
 8001ea6:	4153      	adcs	r3, r2
 8001ea8:	602b      	str	r3, [r5, #0]
 8001eaa:	e7ed      	b.n	8001e88 <__swhatbuf_r+0x1c>
 8001eac:	2340      	movs	r3, #64	; 0x40
 8001eae:	2000      	movs	r0, #0
 8001eb0:	6023      	str	r3, [r4, #0]
 8001eb2:	b016      	add	sp, #88	; 0x58
 8001eb4:	bd70      	pop	{r4, r5, r6, pc}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	ffffe000 	.word	0xffffe000

08001ebc <__smakebuf_r>:
 8001ebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ebe:	2602      	movs	r6, #2
 8001ec0:	898b      	ldrh	r3, [r1, #12]
 8001ec2:	0005      	movs	r5, r0
 8001ec4:	000c      	movs	r4, r1
 8001ec6:	4233      	tst	r3, r6
 8001ec8:	d006      	beq.n	8001ed8 <__smakebuf_r+0x1c>
 8001eca:	0023      	movs	r3, r4
 8001ecc:	3347      	adds	r3, #71	; 0x47
 8001ece:	6023      	str	r3, [r4, #0]
 8001ed0:	6123      	str	r3, [r4, #16]
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	6163      	str	r3, [r4, #20]
 8001ed6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001ed8:	ab01      	add	r3, sp, #4
 8001eda:	466a      	mov	r2, sp
 8001edc:	f7ff ffc6 	bl	8001e6c <__swhatbuf_r>
 8001ee0:	9900      	ldr	r1, [sp, #0]
 8001ee2:	0007      	movs	r7, r0
 8001ee4:	0028      	movs	r0, r5
 8001ee6:	f7ff fcdf 	bl	80018a8 <_malloc_r>
 8001eea:	2800      	cmp	r0, #0
 8001eec:	d108      	bne.n	8001f00 <__smakebuf_r+0x44>
 8001eee:	220c      	movs	r2, #12
 8001ef0:	5ea3      	ldrsh	r3, [r4, r2]
 8001ef2:	059a      	lsls	r2, r3, #22
 8001ef4:	d4ef      	bmi.n	8001ed6 <__smakebuf_r+0x1a>
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	4393      	bics	r3, r2
 8001efa:	431e      	orrs	r6, r3
 8001efc:	81a6      	strh	r6, [r4, #12]
 8001efe:	e7e4      	b.n	8001eca <__smakebuf_r+0xe>
 8001f00:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <__smakebuf_r+0x84>)
 8001f02:	62ab      	str	r3, [r5, #40]	; 0x28
 8001f04:	2380      	movs	r3, #128	; 0x80
 8001f06:	89a2      	ldrh	r2, [r4, #12]
 8001f08:	6020      	str	r0, [r4, #0]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	81a3      	strh	r3, [r4, #12]
 8001f0e:	9b00      	ldr	r3, [sp, #0]
 8001f10:	6120      	str	r0, [r4, #16]
 8001f12:	6163      	str	r3, [r4, #20]
 8001f14:	9b01      	ldr	r3, [sp, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00d      	beq.n	8001f36 <__smakebuf_r+0x7a>
 8001f1a:	230e      	movs	r3, #14
 8001f1c:	5ee1      	ldrsh	r1, [r4, r3]
 8001f1e:	0028      	movs	r0, r5
 8001f20:	f000 f882 	bl	8002028 <_isatty_r>
 8001f24:	2800      	cmp	r0, #0
 8001f26:	d006      	beq.n	8001f36 <__smakebuf_r+0x7a>
 8001f28:	2203      	movs	r2, #3
 8001f2a:	89a3      	ldrh	r3, [r4, #12]
 8001f2c:	4393      	bics	r3, r2
 8001f2e:	001a      	movs	r2, r3
 8001f30:	2301      	movs	r3, #1
 8001f32:	4313      	orrs	r3, r2
 8001f34:	81a3      	strh	r3, [r4, #12]
 8001f36:	89a0      	ldrh	r0, [r4, #12]
 8001f38:	4338      	orrs	r0, r7
 8001f3a:	81a0      	strh	r0, [r4, #12]
 8001f3c:	e7cb      	b.n	8001ed6 <__smakebuf_r+0x1a>
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	080016ed 	.word	0x080016ed

08001f44 <__malloc_lock>:
 8001f44:	4770      	bx	lr

08001f46 <__malloc_unlock>:
 8001f46:	4770      	bx	lr

08001f48 <_free_r>:
 8001f48:	b570      	push	{r4, r5, r6, lr}
 8001f4a:	0005      	movs	r5, r0
 8001f4c:	2900      	cmp	r1, #0
 8001f4e:	d010      	beq.n	8001f72 <_free_r+0x2a>
 8001f50:	1f0c      	subs	r4, r1, #4
 8001f52:	6823      	ldr	r3, [r4, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	da00      	bge.n	8001f5a <_free_r+0x12>
 8001f58:	18e4      	adds	r4, r4, r3
 8001f5a:	0028      	movs	r0, r5
 8001f5c:	f7ff fff2 	bl	8001f44 <__malloc_lock>
 8001f60:	4a1d      	ldr	r2, [pc, #116]	; (8001fd8 <_free_r+0x90>)
 8001f62:	6813      	ldr	r3, [r2, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d105      	bne.n	8001f74 <_free_r+0x2c>
 8001f68:	6063      	str	r3, [r4, #4]
 8001f6a:	6014      	str	r4, [r2, #0]
 8001f6c:	0028      	movs	r0, r5
 8001f6e:	f7ff ffea 	bl	8001f46 <__malloc_unlock>
 8001f72:	bd70      	pop	{r4, r5, r6, pc}
 8001f74:	42a3      	cmp	r3, r4
 8001f76:	d909      	bls.n	8001f8c <_free_r+0x44>
 8001f78:	6821      	ldr	r1, [r4, #0]
 8001f7a:	1860      	adds	r0, r4, r1
 8001f7c:	4283      	cmp	r3, r0
 8001f7e:	d1f3      	bne.n	8001f68 <_free_r+0x20>
 8001f80:	6818      	ldr	r0, [r3, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	1841      	adds	r1, r0, r1
 8001f86:	6021      	str	r1, [r4, #0]
 8001f88:	e7ee      	b.n	8001f68 <_free_r+0x20>
 8001f8a:	0013      	movs	r3, r2
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	2a00      	cmp	r2, #0
 8001f90:	d001      	beq.n	8001f96 <_free_r+0x4e>
 8001f92:	42a2      	cmp	r2, r4
 8001f94:	d9f9      	bls.n	8001f8a <_free_r+0x42>
 8001f96:	6819      	ldr	r1, [r3, #0]
 8001f98:	1858      	adds	r0, r3, r1
 8001f9a:	42a0      	cmp	r0, r4
 8001f9c:	d10b      	bne.n	8001fb6 <_free_r+0x6e>
 8001f9e:	6820      	ldr	r0, [r4, #0]
 8001fa0:	1809      	adds	r1, r1, r0
 8001fa2:	1858      	adds	r0, r3, r1
 8001fa4:	6019      	str	r1, [r3, #0]
 8001fa6:	4282      	cmp	r2, r0
 8001fa8:	d1e0      	bne.n	8001f6c <_free_r+0x24>
 8001faa:	6810      	ldr	r0, [r2, #0]
 8001fac:	6852      	ldr	r2, [r2, #4]
 8001fae:	1841      	adds	r1, r0, r1
 8001fb0:	6019      	str	r1, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	e7da      	b.n	8001f6c <_free_r+0x24>
 8001fb6:	42a0      	cmp	r0, r4
 8001fb8:	d902      	bls.n	8001fc0 <_free_r+0x78>
 8001fba:	230c      	movs	r3, #12
 8001fbc:	602b      	str	r3, [r5, #0]
 8001fbe:	e7d5      	b.n	8001f6c <_free_r+0x24>
 8001fc0:	6821      	ldr	r1, [r4, #0]
 8001fc2:	1860      	adds	r0, r4, r1
 8001fc4:	4282      	cmp	r2, r0
 8001fc6:	d103      	bne.n	8001fd0 <_free_r+0x88>
 8001fc8:	6810      	ldr	r0, [r2, #0]
 8001fca:	6852      	ldr	r2, [r2, #4]
 8001fcc:	1841      	adds	r1, r0, r1
 8001fce:	6021      	str	r1, [r4, #0]
 8001fd0:	6062      	str	r2, [r4, #4]
 8001fd2:	605c      	str	r4, [r3, #4]
 8001fd4:	e7ca      	b.n	8001f6c <_free_r+0x24>
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	20000144 	.word	0x20000144

08001fdc <_read_r>:
 8001fdc:	b570      	push	{r4, r5, r6, lr}
 8001fde:	0005      	movs	r5, r0
 8001fe0:	0008      	movs	r0, r1
 8001fe2:	0011      	movs	r1, r2
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	4c06      	ldr	r4, [pc, #24]	; (8002000 <_read_r+0x24>)
 8001fe8:	6022      	str	r2, [r4, #0]
 8001fea:	001a      	movs	r2, r3
 8001fec:	f7ff f8fa 	bl	80011e4 <_read>
 8001ff0:	1c43      	adds	r3, r0, #1
 8001ff2:	d103      	bne.n	8001ffc <_read_r+0x20>
 8001ff4:	6823      	ldr	r3, [r4, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d000      	beq.n	8001ffc <_read_r+0x20>
 8001ffa:	602b      	str	r3, [r5, #0]
 8001ffc:	bd70      	pop	{r4, r5, r6, pc}
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	20000150 	.word	0x20000150

08002004 <_fstat_r>:
 8002004:	2300      	movs	r3, #0
 8002006:	b570      	push	{r4, r5, r6, lr}
 8002008:	4c06      	ldr	r4, [pc, #24]	; (8002024 <_fstat_r+0x20>)
 800200a:	0005      	movs	r5, r0
 800200c:	0008      	movs	r0, r1
 800200e:	0011      	movs	r1, r2
 8002010:	6023      	str	r3, [r4, #0]
 8002012:	f7ff f9c3 	bl	800139c <_fstat>
 8002016:	1c43      	adds	r3, r0, #1
 8002018:	d103      	bne.n	8002022 <_fstat_r+0x1e>
 800201a:	6823      	ldr	r3, [r4, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d000      	beq.n	8002022 <_fstat_r+0x1e>
 8002020:	602b      	str	r3, [r5, #0]
 8002022:	bd70      	pop	{r4, r5, r6, pc}
 8002024:	20000150 	.word	0x20000150

08002028 <_isatty_r>:
 8002028:	2300      	movs	r3, #0
 800202a:	b570      	push	{r4, r5, r6, lr}
 800202c:	4c06      	ldr	r4, [pc, #24]	; (8002048 <_isatty_r+0x20>)
 800202e:	0005      	movs	r5, r0
 8002030:	0008      	movs	r0, r1
 8002032:	6023      	str	r3, [r4, #0]
 8002034:	f7ff fb12 	bl	800165c <_isatty>
 8002038:	1c43      	adds	r3, r0, #1
 800203a:	d103      	bne.n	8002044 <_isatty_r+0x1c>
 800203c:	6823      	ldr	r3, [r4, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d000      	beq.n	8002044 <_isatty_r+0x1c>
 8002042:	602b      	str	r3, [r5, #0]
 8002044:	bd70      	pop	{r4, r5, r6, pc}
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	20000150 	.word	0x20000150

0800204c <_init>:
 800204c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002052:	bc08      	pop	{r3}
 8002054:	469e      	mov	lr, r3
 8002056:	4770      	bx	lr

08002058 <_fini>:
 8002058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800205e:	bc08      	pop	{r3}
 8002060:	469e      	mov	lr, r3
 8002062:	4770      	bx	lr
